{"version":3,"sources":["App.module.css","components/Table/Pagination/Pagination.tsx","redux/entriesReducer.ts","api/fileApi.ts","components/Table/Table.tsx","App.tsx","reportWebVitals.ts","redux/rootStore.ts","index.tsx","components/Table/Pagination/Pagination.module.css","components/Table/Table.module.css"],"names":["module","exports","Pagination","React","memo","props","console","log","className","styles","pages","changePage","onClick","e","changeCurrentPage","currentPage","lastPage","totalPages","GET_ENTRIES","CHANGE_CURRENT_PAGE","initialData","entries","totalCount","data","length","pageSize","fileApi","slice","Table","state","useSelector","entriesPage","dispatch","useDispatch","changeCurrentPageCallback","useCallback","newCurrentPage","type","payload","useEffect","getEntries","wrapper","Math","ceil","hat","map","entry","date","Date","created_date","row","id","getDate","getMonth","getFullYear","getHours","getMinutes","order_type","name","created_user","surname","patronymic","account","terminal","status","oguid","App","document","title","app","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2557ca80.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__eCSbw\"};","import React from \"react\";\r\nimport styles from \"./Pagination.module.css\";\r\n\r\ntype PaginationPropsType = {\r\n    totalPages: number,\r\n    currentPage: number,\r\n    changeCurrentPage: (newCurrentPage: number) => void,\r\n}\r\n\r\nexport const Pagination: React.FC<PaginationPropsType> = React.memo((props) => {\r\n    console.log('from Pagination')\r\n    return (\r\n        <div className={styles.pages}>\r\n                    <span className={styles.changePage}\r\n                          onClick={(e) => {\r\n                              props.changeCurrentPage(props.currentPage === 1 ? 1 : props.currentPage - 1)\r\n                          }}>\r\n                        Предыдущая\r\n                    </span>\r\n            <span className={styles.currentPage}>\r\n                        {props.currentPage}/\r\n                    </span>\r\n            <span className={styles.lastPage}\r\n                  onClick={(e) => {\r\n                      props.changeCurrentPage(props.totalPages)\r\n                  }}>\r\n                        {props.totalPages}\r\n                    </span>\r\n            <span className={styles.changePage}\r\n                  onClick={(e) => {\r\n                      props.changeCurrentPage(props.currentPage === props.totalPages ? props.totalPages : props.currentPage + 1)\r\n                  }}>\r\n                        Следующая\r\n                    </span>\r\n        </div>\r\n    )\r\n})\r\n","import data from '../api/initialData.json'\r\nimport {actionsType} from \"./rootStore\";\r\n\r\n//constants\r\nconst TEST = 'TEST'\r\nconst GET_ENTRIES = 'GET-ENTRIES'\r\nconst CHANGE_CURRENT_PAGE = 'CHANGE-CURRENT-PAGE'\r\n\r\n//types\r\nexport type entryType = {\r\n    id: number,\r\n    oguid: string,\r\n    status: string,\r\n    order_type: {\r\n        name: string,\r\n        oguid: string,\r\n    },\r\n    terminal: {\r\n        name: string,\r\n        oguid: string,\r\n    },\r\n    account: {\r\n        name: string,\r\n        oguid: string,\r\n    },\r\n    created_user: {\r\n        surname: string,\r\n        name: string,\r\n        patronymic: string,\r\n        oguid: string,\r\n    },\r\n    created_date: number,\r\n}\r\nexport type entriesPageType = {\r\n    entries: entryType[],\r\n    totalCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n}\r\n\r\n//action types\r\nexport type testActionType = ReturnType<typeof test>\r\nexport type getEntriesActionType = ReturnType<typeof getEntries>\r\nexport type changeCurrentPageActionType = ReturnType<typeof changeCurrentPage>\r\n\r\n//action and thunk creators\r\nexport const test = () => {\r\n    return {\r\n        type: TEST,\r\n        payload: {}\r\n    } as const\r\n}\r\nexport const getEntries = (entries: entryType[]) => {\r\n    return {\r\n        type: GET_ENTRIES,\r\n        payload: {\r\n            entries,\r\n        }\r\n    } as const\r\n}\r\nexport const changeCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: CHANGE_CURRENT_PAGE,\r\n        payload: {\r\n            currentPage,\r\n        }\r\n    } as const\r\n}\r\n\r\nconst initialData: entriesPageType = {\r\n    entries: [],\r\n    totalCount: data.length,\r\n    pageSize: 3,\r\n    currentPage: 1,\r\n}\r\n\r\nexport const entriesReducer = (state: entriesPageType = initialData, action: actionsType) => {\r\n    switch (action.type) {\r\n        case GET_ENTRIES:\r\n        case CHANGE_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import data from './initialData.json'\r\n\r\nexport const fileApi = {\r\n    getEntries(pageSize: number, currentPage: number) {\r\n        return data.slice((currentPage - 1) * pageSize, currentPage * pageSize)\r\n    }\r\n}","import React, {useCallback, useEffect} from \"react\";\r\nimport styles from './Table.module.css'\r\nimport {Pagination} from \"./Pagination/Pagination\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {stateType} from \"../../redux/rootStore\";\r\nimport {changeCurrentPage, entriesPageType, entryType, getEntries} from \"../../redux/entriesReducer\";\r\nimport {fileApi} from \"../../api/fileApi\";\r\n\r\nexport const Table: React.FC = React.memo(() => {\r\n    console.log('from Table')\r\n    const pages = (totalCount: number, pageSize: number) => {\r\n        return Math.ceil(totalCount / pageSize)\r\n    }\r\n    const state = useSelector<stateType, entriesPageType>(state => state.entriesPage)\r\n    const dispatch = useDispatch()\r\n    const changeCurrentPageCallback = useCallback((newCurrentPage: number) => {\r\n        dispatch(changeCurrentPage(newCurrentPage))\r\n    }, [dispatch])\r\n    useEffect(() => {\r\n        const entries: entryType[] = fileApi.getEntries(state.pageSize, state.currentPage)\r\n        dispatch(getEntries(entries))\r\n    }, [state.currentPage, state.pageSize, state.entries, dispatch])\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <Pagination currentPage={state.currentPage}\r\n                        totalPages={pages(state.totalCount, state.pageSize)}\r\n                        changeCurrentPage={changeCurrentPageCallback}/>\r\n            <div className={`${styles.hat}`}>\r\n                <div>Номер/дата</div>\r\n                <div>Тип задания/автор</div>\r\n                <div>Аккаунт/Терминал</div>\r\n                <div>Статус</div>\r\n            </div>\r\n            {\r\n                state.entries &&\r\n                state.entries.map(entry => {\r\n                    const date = new Date(entry.created_date)\r\n                    return (\r\n                        <div key={entry.oguid}\r\n                             className={`${styles.row}`}>\r\n                            <div>\r\n                                <div>№{entry.id}</div>\r\n                                <div>\r\n                                    {`${date.getDate()}.${date.getMonth()}.${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}`}\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n                                <div>\r\n                                    {entry.order_type.name}\r\n                                </div>\r\n                                <div>\r\n                                    {`${entry.created_user.surname} ${entry.created_user.name[0]}.${entry.created_user.patronymic[0]}.`}\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n                                <div>{entry.account.name}</div>\r\n                                <div>{entry.terminal.name}</div>\r\n                            </div>\r\n                            <div>\r\n                                <div>{entry.status}</div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })\r\n\r\n            }\r\n        </div>\r\n    )\r\n})","import React, {useEffect} from 'react';\nimport './App.module.css';\nimport {Table} from './components/Table/Table';\nimport styles from './App.module.css'\nimport {HashRouter} from \"react-router-dom\";\n\nconst App: React.FC = React.memo(() => {\n    useEffect(() => {\n        document.title = 'Тестовое задание'\n    }, [])\n\n    return (\n        <HashRouter>\n            <div className={styles.app}>\n                <h1>Тестовое задание</h1>\n                <Table/>\n            </div>\n        </HashRouter>\n    )\n})\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {changeCurrentPageActionType, entriesReducer, getEntriesActionType, testActionType} from \"./entriesReducer\";\r\n\r\n//types\r\nexport type actionsType =\r\n    testActionType\r\n    | getEntriesActionType\r\n    | changeCurrentPageActionType\r\n\r\nexport type stateType = ReturnType<typeof store.getState>\r\nexport type dispatchType = typeof store.dispatch\r\n\r\nconst reducers = combineReducers({\r\n        entriesPage: entriesReducer,\r\n    }\r\n)\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunk))\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/rootStore\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"changePage\":\"Pagination_changePage__M9Egl\",\"lastPage\":\"Pagination_lastPage__2yR6-\",\"currentPage\":\"Pagination_currentPage__YzMUQ\",\"pages\":\"Pagination_pages__3uuBj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Table_wrapper__1ItqM\",\"hat\":\"Table_hat__-MJ_c\",\"row\":\"Table_row__1W1qc\"};"],"sourceRoot":""}
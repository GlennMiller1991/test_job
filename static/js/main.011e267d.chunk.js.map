{"version":3,"sources":["components/Table/Filter/FIlter.module.css","components/Table/Pagination/Pagination.module.css","App.module.css","components/Table/Options/Options.module.css","components/Entry/Entry.module.css","components/Table/Pagination/LastPage/LastPage.tsx","components/Table/Pagination/Pagination.tsx","redux/entriesReducer.ts","redux/entryReducer.ts","api/fileApi.ts","components/Table/Entry/Entry.tsx","components/Table/TableHat/TableHat.tsx","components/Table/Options/Options.tsx","components/Table/Filter/Filter.tsx","components/Table/Table.tsx","components/Entry/EntryInfo/EditableSelect/EditableSelect.tsx","components/Entry/EntryInfo/UnchangedPart/UnchangablePart.tsx","components/Entry/EntryInfo/EntryInfo.tsx","common/preloader.gif","components/Entry/Entry.tsx","App.tsx","reportWebVitals.ts","redux/rootStore.ts","index.tsx","components/Table/Table.module.css"],"names":["module","exports","LastPage","React","memo","props","className","styles","lastPage","onClick","e","changeCurrentPageHandler","totalPages","Pagination","pages","changePage","currentPage","changeCurrentPage","GET_ENTRIES","CHANGE_CURRENT_PAGE","CHANGE_PAGE_SIZE","CHANGE_FILTER","CHANGE_SORT_DATE_VALUE","getEntries","entries","totalCount","type","payload","initialData","data","length","pageSize","filter","sortDate","SET_ENTRY","emptyEntry","id","oguid","status","order_type","terminal","name","account","created_user","created_date","setEntry","entry","initialState","datas","map","surname","patronymic","fileApi","filterDate","entryArray","sort","directSort","reverseSort","slice","entryId","find","obj","s","i","self","indexOf","first","second","Entry","date","Date","activeClassName","active","to","row","order","even","bottom","getDate","getMonth","getFullYear","getHours","getMinutes","TableHat","hat","Options","optionsWrapper","select","value","onChange","changePageSizeCallback","Filter","filterWrapper","FilterStatus","changeFilterCallback","SortDate","changeSortDateCallback","filterStatusWrapper","sortDateWrapper","TableContainer","console","log","state","useSelector","entriesPage","dispatch","useDispatch","useCallback","Number","currentTarget","changeCurrentPageCallback","newCurrentPage","useMemo","Math","ceil","useEffect","document","title","Table","wrapper","EditableSelect","useState","startValue","setValue","editMode","setEditMode","Fragment","autoFocus","onBlur","onBlurCallback","propertyName","options","option","onDoubleClick","UnchangablePart","EntryInfo","created_users","order_types","statuses","changeEditModeFunct","onSaveButtonCallback","EntrySecret","entryPage","entriesState","match","params","src","preLoader","alt","withRouter","App","app","path","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.011e267d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterWrapper\":\"FIlter_filterWrapper__1NeyE\",\"filterStatusWrapper\":\"FIlter_filterStatusWrapper__1hpJH\",\"sortDateWrapper\":\"FIlter_sortDateWrapper__1PjsM\",\"select\":\"FIlter_select__2-j0p\",\"name\":\"FIlter_name__7_ArX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"changePage\":\"Pagination_changePage__M9Egl\",\"lastPage\":\"Pagination_lastPage__2yR6-\",\"pages\":\"Pagination_pages__3uuBj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__eCSbw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"optionsSelect\":\"Options_optionsSelect__5qUrk\",\"select\":\"Options_select__2c-pH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"entry\":\"Entry_entry__1GJCC\",\"description\":\"Entry_description__SqT0K\"};","import React from \"react\";\r\nimport styles from \"../Pagination.module.css\";\r\n\r\ntype LastPagePropsType = {\r\n    totalPages: number,\r\n    changeCurrentPageHandler: (newCurrentPage: number) => void,\r\n}\r\nexport const LastPage: React.FC<LastPagePropsType> = React.memo((props) => {\r\n    return (\r\n        <span className={styles.lastPage}\r\n              onClick={(e) => {\r\n                  props.changeCurrentPageHandler(props.totalPages)\r\n              }}>\r\n                        {props.totalPages}\r\n                    </span>\r\n    )\r\n})","import React from \"react\";\r\nimport styles from \"./Pagination.module.css\";\r\nimport {LastPage} from \"./LastPage/LastPage\";\r\n\r\ntype PaginationPropsType = {\r\n    totalPages: number,\r\n    currentPage: number,\r\n    changeCurrentPage: (newCurrentPage: number) => void,\r\n}\r\n\r\nexport const Pagination: React.FC<PaginationPropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={styles.pages}>\r\n                    <span className={styles.changePage}\r\n                          onClick={(e) => {\r\n                              props.currentPage !== 1 && props.changeCurrentPage(props.currentPage - 1)\r\n                          }}>\r\n                        Предыдущая\r\n                    </span>\r\n            <span className={styles.currentPage}>\r\n                        {props.currentPage}/\r\n                    </span>\r\n            <LastPage totalPages={props.totalPages} changeCurrentPageHandler={props.changeCurrentPage}/>\r\n            <span className={styles.changePage}\r\n                  onClick={(e) => {\r\n                      props.currentPage !== props.totalPages && props.changeCurrentPage(props.currentPage + 1)\r\n                  }}>\r\n                        Следующая\r\n                    </span>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import data from '../api/initialData.json'\r\nimport {actionsType} from \"./rootStore\";\r\n\r\n//constants\r\nconst TEST = 'TEST'\r\nconst GET_ENTRIES = 'GET-ENTRIES'\r\nconst CHANGE_CURRENT_PAGE = 'CHANGE-CURRENT-PAGE'\r\nconst CHANGE_PAGE_SIZE = 'CHANGE-PAGE-SIZE'\r\nconst CHANGE_FILTER = 'CHANGE-FILTER'\r\nconst CHANGE_SORT_DATE_VALUE = 'CHANGE-SORT-DATE-VALUE'\r\n\r\n//types\r\nexport type filterType = 'all' | 'new' | 'completed' | 'assigned_to' | 'started' | 'declined'\r\nexport type notChangedEntryType = {\r\n    id: number,\r\n    oguid: string,\r\n    status: string,\r\n    order_type: {\r\n        name: string,\r\n        oguid: string,\r\n    },\r\n    terminal: {\r\n        name: string,\r\n        oguid: string,\r\n    },\r\n    account: {\r\n        name: string,\r\n        oguid: string,\r\n    },\r\n    created_user: {\r\n        surname: string,\r\n        name: string,\r\n        patronymic: string,\r\n        oguid: string,\r\n    },\r\n    created_date: number,\r\n}\r\nexport type entryType = {\r\n    id: number,\r\n    oguid: string,\r\n    status: string,\r\n    order_type: string,\r\n    terminal: {\r\n        name: string,\r\n        oguid: string,\r\n    },\r\n    account: {\r\n        name: string,\r\n        oguid: string,\r\n    },\r\n    created_user: string,\r\n    created_date: number,\r\n}\r\nexport type entriesPageType = {\r\n    entries: entryType[],\r\n    totalCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    filter: string, //filterType,\r\n    sortDate: string,\r\n}\r\n\r\n//action types\r\nexport type testActionType = ReturnType<typeof test>\r\nexport type getEntriesActionType = ReturnType<typeof getEntries>\r\nexport type changeCurrentPageActionType = ReturnType<typeof changeCurrentPage>\r\nexport type changePageSizeActionType = ReturnType<typeof changePageSize>\r\nexport type changeFilterActionType = ReturnType<typeof changeFilterValue>\r\nexport type changeSortDateValueActionType = ReturnType<typeof changeSortDateValue>\r\n\r\n//action and thunk creators\r\nexport const test = () => {\r\n    return {\r\n        type: TEST,\r\n        payload: {}\r\n    } as const\r\n}\r\nexport const getEntries = (entries: entryType[], totalCount: number, currentPage: number) => {\r\n    return {\r\n        type: GET_ENTRIES,\r\n        payload: {\r\n            entries,\r\n            totalCount,\r\n            currentPage,\r\n        }\r\n    } as const\r\n}\r\nexport const changeCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: CHANGE_CURRENT_PAGE,\r\n        payload: {\r\n            currentPage,\r\n        }\r\n    } as const\r\n}\r\nexport const changePageSize = (pageSize: number) => {\r\n    return {\r\n        type: CHANGE_PAGE_SIZE,\r\n        payload: {\r\n            pageSize,\r\n        }\r\n    } as const\r\n}\r\nexport const changeFilterValue = (filter: string /*filterType*/) => {\r\n    return {\r\n        type: CHANGE_FILTER,\r\n        payload: {\r\n            filter,\r\n        }\r\n    } as const\r\n}\r\nexport const changeSortDateValue = (sortDate: string) => {\r\n    return {\r\n        type: CHANGE_SORT_DATE_VALUE,\r\n        payload: {\r\n            sortDate,\r\n        }\r\n    } as const\r\n}\r\n\r\nconst initialData: entriesPageType = {\r\n    entries: [],\r\n    totalCount: data.length,\r\n    pageSize: 3,\r\n    currentPage: 1,\r\n    filter: 'all',\r\n    sortDate: 'direct',\r\n}\r\n\r\nexport const entriesReducer = (state: entriesPageType = initialData, action: actionsType) => {\r\n    switch (action.type) {\r\n        case GET_ENTRIES:\r\n        case CHANGE_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case CHANGE_FILTER:\r\n        case CHANGE_PAGE_SIZE:\r\n        case CHANGE_SORT_DATE_VALUE:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                currentPage: 1,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {actionsType} from \"./rootStore\";\r\nimport {entryType} from \"./entriesReducer\";\r\n\r\n//constants\r\nconst SET_ENTRY = 'SET-ENTRY'\r\nexport const emptyEntry = {\r\n    id: -1,\r\n    oguid: '',\r\n    status: '',\r\n    order_type: '',\r\n    terminal: {\r\n        name: '',\r\n        oguid: '',\r\n    },\r\n    account: {\r\n        name: '',\r\n        oguid: '',\r\n    },\r\n    created_user: '',\r\n    created_date: 0,\r\n}\r\n//types\r\nexport type entryPageStateType = entryType\r\nexport type setEntryActionType = ReturnType<typeof setEntry>\r\n\r\n//action and thunk creators\r\nexport const setEntry = (entry: entryType) => {\r\n    return {\r\n        type: SET_ENTRY,\r\n        payload: {\r\n            ...entry,\r\n        }\r\n    } as const\r\n}\r\n\r\n//data\r\nconst initialState: entryPageStateType = emptyEntry\r\n\r\n\r\nexport const entryReducer = (state= initialState, action: actionsType) => {\r\n    switch(action.type) {\r\n        case SET_ENTRY:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import datas from './initialData.json'\r\nimport {emptyEntry} from \"../redux/entryReducer\";\r\nimport {entryType, notChangedEntryType} from \"../redux/entriesReducer\";\r\n\r\nlet notChangedData: notChangedEntryType[] = datas\r\nlet data: entryType[] = notChangedData.map(entry => {\r\n    return {\r\n        ...entry,\r\n        order_type: entry.order_type.name,\r\n        created_user: `${entry.created_user.surname} ${entry.created_user.name[0]}.${entry.created_user.patronymic[0]}`\r\n    }\r\n})\r\n\r\nexport const fileApi = {\r\n    getEntries(pageSize: number, currentPage: number, filter: string, filterDate: string) {\r\n        //filter\r\n        let entryArray = filter === 'all' ? data : data.filter(entry => entry.status === filter)\r\n\r\n        //sort\r\n        if (filterDate === 'direct') {\r\n            entryArray.sort(directSort)\r\n        } else {\r\n            entryArray.sort(reverseSort)\r\n        }\r\n\r\n        return {entries: entryArray.slice((currentPage - 1) * pageSize, currentPage * pageSize), totalCount: entryArray.length}\r\n    },\r\n    setEntry(entryId: number) {\r\n        const entry = data.find(entry => entry.id === entryId)\r\n        return (\r\n            entry ? entry : emptyEntry\r\n        )\r\n    },\r\n    renewData(obj: Object, entryId: number) {\r\n        data = data.map(entry => entry.id === entryId ? {...entry, ...obj} : entry)\r\n    },\r\n    getAuthors() {\r\n        return data.map(entry => entry.created_user).filter((s, i, self) => self.indexOf(s) === i)\r\n    },\r\n    getOrders() {\r\n        return data.map(entry => entry.order_type).filter((s, i, self) => self.indexOf(s) === i)\r\n    }\r\n}\r\n\r\n//tools\r\nconst directSort = (first: entryType, second: entryType) => {\r\n    return first.created_date > second.created_date ? -1 : 1\r\n}\r\nconst reverseSort = (first: entryType, second: entryType) => {\r\n    return first.created_date > second.created_date ? 1 : -1\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {entryType} from \"../../../redux/entriesReducer\";\r\nimport styles from '../Table.module.css'\r\n\r\ntype EntryPropsType = {\r\n    entry: entryType,\r\n    order: number,\r\n}\r\n\r\nexport const Entry: React.FC<EntryPropsType> = React.memo((props) => {\r\n    const date = new Date(props.entry.created_date)\r\n    const entry = props.entry\r\n    return (\r\n        <NavLink activeClassName={styles.active}\r\n                 to={`/order/${entry.id}`} key={entry.oguid}>\r\n            <div className={`${styles.row} ${props.order % 2 === 0 ? styles.even : ''}`}>\r\n                <div>\r\n                    <div>№{entry.id}</div>\r\n                    <div className={styles.bottom}>\r\n                        {`${date.getDate()}.${date.getMonth()}.${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}`}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        {entry.order_type}\r\n                    </div>\r\n                    <div className={styles.bottom}>\r\n                        {props.entry.created_user}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div>{entry.account.name}</div>\r\n                    <div className={styles.bottom}>{entry.terminal.name}</div>\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        {entry.status}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </NavLink>\r\n    )\r\n})","import React from \"react\";\r\nimport styles from \"../Table.module.css\";\r\n\r\nexport const TableHat: React.FC = React.memo(() => {\r\n    return (\r\n        <div className={`${styles.hat}`}>\r\n            <div>Номер/дата</div>\r\n            <div>Тип задания/автор</div>\r\n            <div>Аккаунт/Терминал</div>\r\n            <div>Статус</div>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent} from \"react\";\r\nimport styles from './Options.module.css'\r\n\r\ntype OptionsPropsType = {\r\n    pageSize: number,\r\n    changePageSizeCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n}\r\n\r\nexport const Options: React.FC<OptionsPropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={styles.optionsWrapper}>\r\n            Показывать по\r\n            <select className={styles.select}\r\n                    value={props.pageSize} onChange={props.changePageSizeCallback}>\r\n                <option value={3}>3</option>\r\n                <option value={10}>10</option>\r\n                <option value={25}>25</option>\r\n            </select>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent} from \"react\";\r\nimport styles from './FIlter.module.css'\r\n\r\ntype FilterPropsType = {\r\n    filter: string, //filterType,\r\n    sortDate: string,\r\n    changeFilterCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n    changeSortDateCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n}\r\nexport const Filter: React.FC<FilterPropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={styles.filterWrapper}>\r\n            <FilterStatus filter={props.filter} changeFilterCallback={props.changeFilterCallback}/>\r\n            <SortDate sortDate={props.sortDate} changeSortDateCallback={props.changeSortDateCallback}/>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype FilterStatusPropsType = {\r\n    filter: string, //filterType,\r\n    changeFilterCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n}\r\nexport const FilterStatus: React.FC<FilterStatusPropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={styles.filterStatusWrapper}>\r\n            <div className={styles.name}>\r\n                Статус:\r\n            </div>\r\n            <select value={props.filter}\r\n                    className={styles.select}\r\n                    onChange={props.changeFilterCallback}>\r\n                <option value={'all'}>Все статусы</option>\r\n                <option value={'new'}>new</option>\r\n                <option value={'completed'}>completed</option>\r\n                <option value={'assigned_to'}>assigned_to</option>\r\n                <option value={'started'}>started</option>\r\n                <option value={'declined'}>declined</option>\r\n            </select>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype SortDatePropsType = {\r\n    changeSortDateCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n    sortDate: string,\r\n}\r\nexport const SortDate: React.FC<SortDatePropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={styles.sortDateWrapper}>\r\n            <div className={styles.name}>\r\n                Дата:\r\n            </div>\r\n            <select value={props.sortDate}\r\n                    className={styles.select}\r\n                    onChange={props.changeSortDateCallback}>\r\n                <option value={'direct'}>Сначала поздние</option>\r\n                <option value={'reverse'}>Сначала ранние</option>\r\n            </select>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useCallback, useEffect, useMemo} from \"react\";\r\nimport styles from './Table.module.css'\r\nimport {Pagination} from \"./Pagination/Pagination\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {stateType} from \"../../redux/rootStore\";\r\nimport {\r\n    changeCurrentPage,\r\n    changeFilterValue,\r\n    changePageSize, changeSortDateValue,\r\n    entriesPageType,\r\n    getEntries\r\n} from \"../../redux/entriesReducer\";\r\nimport {fileApi} from \"../../api/fileApi\";\r\nimport {Entry} from \"./Entry/Entry\";\r\nimport {TableHat} from \"./TableHat/TableHat\";\r\nimport {Options} from \"./Options/Options\";\r\nimport {Filter} from \"./Filter/Filter\";\r\n\r\nexport const TableContainer: React.FC = React.memo(() => {\r\n    console.log('from table')\r\n    //initial data\r\n    const state = useSelector<stateType, entriesPageType>(state => state.entriesPage)\r\n    const dispatch = useDispatch()\r\n\r\n    //callbacks\r\n    const changePageSizeCallback = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\r\n        dispatch(changePageSize(Number(e.currentTarget.value)))\r\n    }, [dispatch])\r\n    const changeCurrentPageCallback = useCallback((newCurrentPage: number) => {\r\n        dispatch(changeCurrentPage(newCurrentPage))\r\n    }, [dispatch])\r\n    const totalPages = useMemo(() => {\r\n        return Math.ceil(state.totalCount / state.pageSize)\r\n    }, [state.totalCount, state.pageSize])\r\n    const changeFilterCallback = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\r\n        dispatch(changeFilterValue(e.currentTarget.value))\r\n    }, [dispatch])\r\n    const changeSortDateCallback = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\r\n        dispatch(changeSortDateValue(e.currentTarget.value))\r\n    }, [dispatch])\r\n\r\n    //side-effects\r\n    useEffect(() => {\r\n        document.title = 'Тестовое задание'\r\n\r\n        const {entries, totalCount} = fileApi.getEntries(state.pageSize, state.currentPage, state.filter, state.sortDate)\r\n        if (totalCount) {\r\n            if (entries.length) dispatch(getEntries(entries, totalCount, state.currentPage))\r\n            else dispatch(getEntries(entries, totalCount, 1))\r\n        } else {\r\n            dispatch(getEntries(entries, totalCount, 0))\r\n        }\r\n    }, [state.currentPage, state.pageSize, dispatch, state.filter, state.sortDate])\r\n\r\n    return (\r\n        <Table state={state}\r\n               totalPages={totalPages}\r\n               changePageSizeCallback={changePageSizeCallback}\r\n               changeCurrentPageCallback={changeCurrentPageCallback}\r\n               changeFilterCallback={changeFilterCallback}\r\n               changeSortDateCallback={changeSortDateCallback}/>\r\n    )\r\n})\r\n\r\ntype TablePropsType = {\r\n    state: entriesPageType,\r\n    totalPages: number,\r\n    changePageSizeCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n    changeCurrentPageCallback: (newCurrentPage: number) => void,\r\n    changeFilterCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n    changeSortDateCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n}\r\nconst Table: React.FC<TablePropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.optionsWrapper}>\r\n                <Filter filter={props.state.filter}\r\n                        sortDate={props.state.sortDate}\r\n                        changeFilterCallback={props.changeFilterCallback}\r\n                        changeSortDateCallback={props.changeSortDateCallback}/>\r\n                <Options pageSize={props.state.pageSize}\r\n                         changePageSizeCallback={props.changePageSizeCallback}/>\r\n                <Pagination currentPage={props.state.currentPage}\r\n                            totalPages={props.totalPages}\r\n                            changeCurrentPage={props.changeCurrentPageCallback}/>\r\n            </div>\r\n            <TableHat/>\r\n            {\r\n                props.state.entries.map((entry, order) => {\r\n                    return (\r\n                        <Entry entry={entry} order={order} key={order}/>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useState} from \"react\";\r\n\r\ntype EditableSelectPropsType = {\r\n    options: string[],\r\n    startValue: string,\r\n    onBlurCallback: (obj: Object, changeEditModeFunct: (value: boolean) => void) => void,\r\n    propertyName: string,\r\n}\r\nexport const EditableSelect: React.FC<EditableSelectPropsType> = React.memo((props) => {\r\n    console.log('from EditableSelect')\r\n    const [value, setValue] = useState(props.startValue)\r\n    const [editMode, setEditMode] = useState(false)\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                editMode ?\r\n                    <select value={value}\r\n                            autoFocus\r\n                            onBlur={() => props.onBlurCallback({[props.propertyName]: value}, setEditMode)}\r\n                            onChange={(e) => setValue(e.currentTarget.value)}>\r\n                        {\r\n                            props.options.map((option, id) => <option key={id} value={option}>{option}</option>)\r\n                        }\r\n                    </select>\r\n                    :\r\n                    <span onDoubleClick={() => setEditMode(true)}>{value}</span>\r\n            }\r\n        </React.Fragment>\r\n    )\r\n})","import React from \"react\";\r\n\r\ntype UnchangablePartPropsType = {\r\n    id: number,\r\n    date: string,\r\n}\r\nexport const UnchangablePart: React.FC<UnchangablePartPropsType> = React.memo((props) => {\r\n    console.log('from UnchangablePart')\r\n    return (\r\n        <React.Fragment>\r\n            №{props.id}\r\n            <hr/>\r\n            {props.date}\r\n            <hr/>\r\n        </React.Fragment>\r\n    )\r\n})","import {entryPageStateType} from \"../../../redux/entryReducer\";\r\nimport React, {useCallback, useMemo} from \"react\";\r\nimport styles from \"../Entry.module.css\";\r\nimport {fileApi} from \"../../../api/fileApi\";\r\nimport {EditableSelect} from \"./EditableSelect/EditableSelect\";\r\nimport {UnchangablePart} from \"./UnchangedPart/UnchangablePart\";\r\n\r\ntype EntryInfoPropsType = {\r\n    state: entryPageStateType,\r\n    onSaveButtonCallback: (obj: Object, entryId: number) => void,\r\n}\r\nexport const EntryInfo: React.FC<EntryInfoPropsType> = React.memo((props) => {\r\n    console.log('from entryInfo')\r\n    const state = props.state\r\n\r\n    //useMemo only for test aim, 'cause if we are getting data from server, we are must check it every time\r\n    const [created_users, order_types, statuses] = useMemo(() => {\r\n        return [fileApi.getAuthors(), fileApi.getOrders(), ['new', 'completed', 'assigned_to', 'declined', 'started']]\r\n    }, [])\r\n\r\n    const onBlurCallback = useCallback((obj: Object, changeEditModeFunct: (value: boolean) => void) => {\r\n        props.onSaveButtonCallback(obj, props.state.id)\r\n        changeEditModeFunct(false)\r\n    }, [props.onSaveButtonCallback, props.state.id])\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className={styles.entry}>\r\n                    <UnchangablePart id={state.id}\r\n                                     date={`${new Date(state.created_date).getDate()}.${new Date(state.created_date).getMonth()}.${new Date(state.created_date).getFullYear()} ${new Date(state.created_date).getHours()}:${new Date(state.created_date).getMinutes()}`}/>\r\n                    <EditableSelect options={order_types}\r\n                                    startValue={state.order_type}\r\n                                    onBlurCallback={onBlurCallback}\r\n                                    propertyName={'order_type'}/>\r\n                    <hr/>\r\n                    <EditableSelect options={created_users}\r\n                                    startValue={state.created_user}\r\n                                    onBlurCallback={onBlurCallback}\r\n                                    propertyName={'created_user'}/>\r\n                    <hr/>\r\n                    {state.account.name}\r\n                    <hr/>\r\n                    {state.terminal.name}\r\n                    <hr/>\r\n                    <EditableSelect options={statuses}\r\n                                    startValue={props.state.status}\r\n                                    onBlurCallback={onBlurCallback}\r\n                                    propertyName={'status'}/>\r\n                    <hr/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","export default __webpack_public_path__ + \"static/media/preloader.53b421a8.gif\";","import React, {useCallback, useEffect} from \"react\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {entryPageStateType, setEntry} from \"../../redux/entryReducer\";\r\nimport {stateType} from \"../../redux/rootStore\";\r\nimport {fileApi} from \"../../api/fileApi\";\r\nimport {EntryInfo} from \"./EntryInfo/EntryInfo\";\r\nimport preLoader from '../../common/preloader.gif'\r\nimport {entriesPageType, getEntries} from \"../../redux/entriesReducer\";\r\n\r\ntype PathParamsType = {\r\n    entryId: string,\r\n}\r\n\r\nconst EntrySecret: React.FC<RouteComponentProps<PathParamsType>> = React.memo((props) => {\r\n    console.log('from Entry')\r\n    //initial data\r\n    const state = useSelector<stateType, entryPageStateType>(state => state.entryPage)\r\n    const entriesState = useSelector<stateType, entriesPageType>(state => state.entriesPage)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSaveButtonCallback = useCallback((obj: Object, entryId: number) => {\r\n        fileApi.renewData(obj, entryId)\r\n        dispatch(setEntry(fileApi.setEntry(state.id)))\r\n        const {entries, totalCount} = fileApi.getEntries(\r\n            entriesState.pageSize,\r\n            entriesState.currentPage,\r\n            entriesState.filter,\r\n            entriesState.sortDate)\r\n        dispatch(getEntries(entries, totalCount, 1))\r\n    }, [state.id, dispatch])\r\n\r\n    //side-effects\r\n    useEffect(() => {\r\n        document.title = props.match.params.entryId\r\n        dispatch(setEntry(fileApi.setEntry(+props.match.params.entryId)))\r\n    }, [dispatch, props.match.params.entryId])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                state.id !== +props.match.params.entryId ?\r\n                    <img src={preLoader} alt={'please, wait...'}/> :\r\n                    <EntryInfo state={state}\r\n                               onSaveButtonCallback={onSaveButtonCallback}/>\r\n            }\r\n        </React.Fragment>\r\n    )\r\n})\r\n\r\nexport const Entry = withRouter(EntrySecret)","import React from 'react';\nimport './App.module.css';\nimport {TableContainer} from './components/Table/Table';\nimport styles from './App.module.css'\nimport {HashRouter, NavLink, Route} from \"react-router-dom\";\nimport {Switch} from 'react-router-dom';\nimport {Entry} from \"./components/Entry/Entry\";\n\nconst App: React.FC = React.memo(() => {\n\n    return (\n        <HashRouter>\n            <div className={styles.app}>\n                <h1><NavLink to={'/'}>Тестовая версия</NavLink></h1>\n                <Switch>\n                    <Route path={'/'} exact render={() => <TableContainer/>}/>\n                    <Route path={'/order/:entryId'} render={() => <Entry/>}/>\n                </Switch>\n            </div>\n        </HashRouter>\n    )\n})\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {\r\n    changeCurrentPageActionType, changeFilterActionType,\r\n    changePageSizeActionType, changeSortDateValueActionType,\r\n    entriesReducer,\r\n    getEntriesActionType,\r\n    testActionType\r\n} from \"./entriesReducer\";\r\nimport {entryReducer, setEntryActionType} from \"./entryReducer\";\r\n\r\n//types\r\nexport type actionsType =\r\n    testActionType\r\n    | getEntriesActionType\r\n    | changeCurrentPageActionType\r\n    | changePageSizeActionType\r\n    | setEntryActionType\r\n    | changeFilterActionType\r\n    | changeSortDateValueActionType\r\n\r\nexport type stateType = ReturnType<typeof store.getState>\r\nexport type dispatchType = typeof store.dispatch\r\n\r\nconst reducers = combineReducers({\r\n        entriesPage: entriesReducer,\r\n        entryPage: entryReducer,\r\n    }\r\n)\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunk))\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/rootStore\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Table_wrapper__1ItqM\",\"hat\":\"Table_hat__-MJ_c\",\"row\":\"Table_row__1W1qc\",\"optionsWrapper\":\"Table_optionsWrapper__34Aq8\",\"even\":\"Table_even__VsG8M\",\"bottom\":\"Table_bottom__2EBDT\"};"],"sourceRoot":""}
{"version":3,"sources":["components/Table/Filter/FIlter.module.css","components/Table/Pagination/Pagination.module.css","App.module.css","components/Table/Options/Options.module.css","components/Entry/Entry.module.css","components/Table/Pagination/LastPage/LastPage.tsx","components/Table/Pagination/Pagination.tsx","redux/entriesReducer.ts","redux/entryReducer.ts","api/fileApi.ts","components/Table/Entry/Entry.tsx","components/Table/TableHat/TableHat.tsx","components/Table/Options/Options.tsx","components/Table/Filter/Filter.tsx","components/Table/Table.tsx","components/Entry/Entry.tsx","App.tsx","reportWebVitals.ts","redux/rootStore.ts","index.tsx","components/Table/Table.module.css"],"names":["module","exports","LastPage","React","memo","props","className","styles","lastPage","onClick","e","changeCurrentPageHandler","totalPages","Pagination","pages","changePage","currentPage","changeCurrentPage","GET_ENTRIES","CHANGE_CURRENT_PAGE","CHANGE_PAGE_SIZE","CHANGE_FILTER","CHANGE_SORT_DATE_VALUE","initialData","entries","totalCount","data","length","pageSize","filter","sortDate","SET_ENTRY","emptyEntry","id","oguid","status","order_type","name","terminal","account","created_user","surname","patronymic","created_date","initialState","fileApi","filterDate","entryArray","entry","sort","directSort","reverseSort","slice","entryId","find","first","second","Entry","date","Date","activeClassName","active","to","row","order","even","bottom","getDate","getMonth","getFullYear","getHours","getMinutes","TableHat","hat","Options","optionsWrapper","select","value","onChange","changePageSizeCallback","Filter","filterWrapper","FilterStatus","changeFilterCallback","SortDate","changeSortDateCallback","filterStatusWrapper","sortDateWrapper","TableContainer","state","useSelector","entriesPage","dispatch","useDispatch","useEffect","type","payload","getEntries","useCallback","Number","currentTarget","changeCurrentPageCallback","newCurrentPage","useMemo","Math","ceil","Table","wrapper","map","EntrySecret","entryPage","document","title","match","params","withRouter","App","app","path","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3fc0a71d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterWrapper\":\"FIlter_filterWrapper__1NeyE\",\"filterStatusWrapper\":\"FIlter_filterStatusWrapper__1hpJH\",\"sortDateWrapper\":\"FIlter_sortDateWrapper__1PjsM\",\"select\":\"FIlter_select__2-j0p\",\"name\":\"FIlter_name__7_ArX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"changePage\":\"Pagination_changePage__M9Egl\",\"lastPage\":\"Pagination_lastPage__2yR6-\",\"pages\":\"Pagination_pages__3uuBj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__eCSbw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"optionsSelect\":\"Options_optionsSelect__5qUrk\",\"select\":\"Options_select__2c-pH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"entry\":\"Entry_entry__1GJCC\"};","import React from \"react\";\r\nimport styles from \"../Pagination.module.css\";\r\n\r\ntype LastPagePropsType = {\r\n    totalPages: number,\r\n    changeCurrentPageHandler: (newCurrentPage: number) => void,\r\n}\r\nexport const LastPage: React.FC<LastPagePropsType> = React.memo((props) => {\r\n    return (\r\n        <span className={styles.lastPage}\r\n              onClick={(e) => {\r\n                  props.changeCurrentPageHandler(props.totalPages)\r\n              }}>\r\n                        {props.totalPages}\r\n                    </span>\r\n    )\r\n})","import React from \"react\";\r\nimport styles from \"./Pagination.module.css\";\r\nimport {LastPage} from \"./LastPage/LastPage\";\r\n\r\ntype PaginationPropsType = {\r\n    totalPages: number,\r\n    currentPage: number,\r\n    changeCurrentPage: (newCurrentPage: number) => void,\r\n}\r\n\r\nexport const Pagination: React.FC<PaginationPropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={styles.pages}>\r\n                    <span className={styles.changePage}\r\n                          onClick={(e) => {\r\n                              props.currentPage !== 1 && props.changeCurrentPage(props.currentPage - 1)\r\n                          }}>\r\n                        Предыдущая\r\n                    </span>\r\n            <span className={styles.currentPage}>\r\n                        {props.currentPage}/\r\n                    </span>\r\n            <LastPage totalPages={props.totalPages} changeCurrentPageHandler={props.changeCurrentPage}/>\r\n            <span className={styles.changePage}\r\n                  onClick={(e) => {\r\n                      props.currentPage !== props.totalPages && props.changeCurrentPage(props.currentPage + 1)\r\n                  }}>\r\n                        Следующая\r\n                    </span>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import data from '../api/initialData.json'\r\nimport {actionsType} from \"./rootStore\";\r\n\r\n//constants\r\nconst TEST = 'TEST'\r\nconst GET_ENTRIES = 'GET-ENTRIES'\r\nconst CHANGE_CURRENT_PAGE = 'CHANGE-CURRENT-PAGE'\r\nconst CHANGE_PAGE_SIZE = 'CHANGE-PAGE-SIZE'\r\nconst CHANGE_FILTER = 'CHANGE-FILTER'\r\nconst CHANGE_SORT_DATE_VALUE = 'CHANGE-SORT-DATE-VALUE'\r\n\r\n//types\r\nexport type filterType = 'all' | 'new' | 'completed' | 'assigned_to' | 'started' | 'declined'\r\nexport type entryType = {\r\n    id: number,\r\n    oguid: string,\r\n    status: string,\r\n    order_type: {\r\n        name: string,\r\n        oguid: string,\r\n    },\r\n    terminal: {\r\n        name: string,\r\n        oguid: string,\r\n    },\r\n    account: {\r\n        name: string,\r\n        oguid: string,\r\n    },\r\n    created_user: {\r\n        surname: string,\r\n        name: string,\r\n        patronymic: string,\r\n        oguid: string,\r\n    },\r\n    created_date: number,\r\n}\r\nexport type entriesPageType = {\r\n    entries: entryType[],\r\n    totalCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    filter: string, //filterType,\r\n    sortDate: string,\r\n}\r\n\r\n//action types\r\nexport type testActionType = ReturnType<typeof test>\r\nexport type getEntriesActionType = ReturnType<typeof getEntries>\r\nexport type changeCurrentPageActionType = ReturnType<typeof changeCurrentPage>\r\nexport type changePageSizeActionType = ReturnType<typeof changePageSize>\r\nexport type changeFilterActionType = ReturnType<typeof changeFilterValue>\r\nexport type changeSortDateValueActionType = ReturnType<typeof changeSortDateValue>\r\n\r\n//action and thunk creators\r\nexport const test = () => {\r\n    return {\r\n        type: TEST,\r\n        payload: {}\r\n    } as const\r\n}\r\nexport const getEntries = (entries: entryType[], totalCount: number) => {\r\n    return {\r\n        type: GET_ENTRIES,\r\n        payload: {\r\n            entries,\r\n            totalCount,\r\n        }\r\n    } as const\r\n}\r\nexport const changeCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: CHANGE_CURRENT_PAGE,\r\n        payload: {\r\n            currentPage,\r\n        }\r\n    } as const\r\n}\r\nexport const changePageSize = (pageSize: number) => {\r\n    return {\r\n        type: CHANGE_PAGE_SIZE,\r\n        payload: {\r\n            pageSize,\r\n        }\r\n    } as const\r\n}\r\nexport const changeFilterValue = (filter: string /*filterType*/) => {\r\n    return {\r\n        type: CHANGE_FILTER,\r\n        payload: {\r\n            filter,\r\n        }\r\n    } as const\r\n}\r\nexport const changeSortDateValue = (sortDate: string) => {\r\n    return {\r\n        type: CHANGE_SORT_DATE_VALUE,\r\n        payload: {\r\n            sortDate,\r\n        }\r\n    } as const\r\n}\r\n\r\nconst initialData: entriesPageType = {\r\n    entries: [],\r\n    totalCount: data.length,\r\n    pageSize: 3,\r\n    currentPage: 1,\r\n    filter: 'all',\r\n    sortDate: 'direct',\r\n}\r\n\r\nexport const entriesReducer = (state: entriesPageType = initialData, action: actionsType) => {\r\n    switch (action.type) {\r\n        case GET_ENTRIES:\r\n        case CHANGE_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case CHANGE_FILTER:\r\n        case CHANGE_PAGE_SIZE:\r\n        case CHANGE_SORT_DATE_VALUE:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                currentPage: 1,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {actionsType} from \"./rootStore\";\r\nimport {entryType} from \"./entriesReducer\";\r\n\r\n//constants\r\nconst SET_ENTRY = 'SET-ENTRY'\r\nexport const emptyEntry = {\r\n    id: -1,\r\n    oguid: '',\r\n    status: '',\r\n    order_type: {\r\n        name: '',\r\n        oguid: '',\r\n    },\r\n    terminal: {\r\n        name: '',\r\n        oguid: '',\r\n    },\r\n    account: {\r\n        name: '',\r\n        oguid: '',\r\n    },\r\n    created_user: {\r\n        surname: '',\r\n        name: '',\r\n        patronymic: '',\r\n        oguid: '',\r\n    },\r\n    created_date: 0,\r\n}\r\n//types\r\nexport type entryPageStateType = entryType\r\nexport type setEntryActionType = ReturnType<typeof setEntry>\r\n\r\n//action and thunk creators\r\nexport const setEntry = (entry: entryType) => {\r\n    return {\r\n        type: SET_ENTRY,\r\n        payload: {\r\n            ...entry,\r\n        }\r\n    } as const\r\n}\r\n\r\n//data\r\nconst initialState: entryPageStateType = emptyEntry\r\n\r\n\r\nexport const entryReducer = (state= initialState, action: actionsType) => {\r\n    switch(action.type) {\r\n        case SET_ENTRY:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import data from './initialData.json'\r\nimport {emptyEntry} from \"../redux/entryReducer\";\r\nimport {entryType} from \"../redux/entriesReducer\";\r\n\r\nexport const fileApi = {\r\n    getEntries(pageSize: number, currentPage: number, filter: string, filterDate: string) {\r\n        //filter\r\n        let entryArray = filter === 'all' ? data : data.filter(entry => entry.status === filter)\r\n\r\n        //sort\r\n        if (filterDate === 'direct') {\r\n            entryArray.sort(directSort)\r\n        } else {\r\n            entryArray.sort(reverseSort)\r\n        }\r\n\r\n        return {entries: entryArray.slice((currentPage - 1) * pageSize, currentPage * pageSize), totalCount: entryArray.length}\r\n    },\r\n    setEntry(entryId: number) {\r\n        const entry = data.find(entry => entry.id === entryId)\r\n        return (\r\n            entry ? entry : emptyEntry\r\n        )\r\n    }\r\n}\r\n\r\n//tools\r\nconst directSort = (first: entryType, second: entryType) => {\r\n    return first.created_date > second.created_date ? -1 : 1\r\n}\r\nconst reverseSort = (first: entryType, second: entryType) => {\r\n    return first.created_date > second.created_date ? 1 : -1\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {entryType} from \"../../../redux/entriesReducer\";\r\nimport styles from '../Table.module.css'\r\n\r\ntype EntryPropsType = {\r\n    entry: entryType,\r\n    order: number,\r\n}\r\n\r\nexport const Entry: React.FC<EntryPropsType> = React.memo((props) => {\r\n    const date = new Date(props.entry.created_date)\r\n    const entry = props.entry\r\n    return (\r\n        <NavLink activeClassName={styles.active}\r\n                 to={`/order/${entry.id}`} key={entry.oguid}>\r\n            <div className={`${styles.row} ${props.order % 2 === 0 ? styles.even : ''}`}>\r\n                <div>\r\n                    <div>№{entry.id}</div>\r\n                    <div className={styles.bottom}>\r\n                        {`${date.getDate()}.${date.getMonth()}.${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}`}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        {entry.order_type.name}\r\n                    </div>\r\n                    <div className={styles.bottom}>\r\n                        {`${entry.created_user.surname} ${entry.created_user.name[0]}.${entry.created_user.patronymic[0]}.`}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div>{entry.account.name}</div>\r\n                    <div className={styles.bottom}>{entry.terminal.name}</div>\r\n                </div>\r\n                <div>\r\n                    <div>{entry.status}</div>\r\n                </div>\r\n            </div>\r\n        </NavLink>\r\n    )\r\n})","import React from \"react\";\r\nimport styles from \"../Table.module.css\";\r\n\r\nexport const TableHat: React.FC = React.memo(() => {\r\n    return (\r\n        <div className={`${styles.hat}`}>\r\n            <div>Номер/дата</div>\r\n            <div>Тип задания/автор</div>\r\n            <div>Аккаунт/Терминал</div>\r\n            <div>Статус</div>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent} from \"react\";\r\nimport styles from './Options.module.css'\r\n\r\ntype OptionsPropsType = {\r\n    pageSize: number,\r\n    changePageSizeCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n}\r\n\r\nexport const Options: React.FC<OptionsPropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={styles.optionsWrapper}>\r\n            Показывать по\r\n            <select className={styles.select}\r\n                    value={props.pageSize} onChange={props.changePageSizeCallback}>\r\n                <option value={3}>3</option>\r\n                <option value={10}>10</option>\r\n                <option value={25}>25</option>\r\n            </select>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent} from \"react\";\r\nimport styles from './FIlter.module.css'\r\n\r\ntype FilterPropsType = {\r\n    filter: string, //filterType,\r\n    sortDate: string,\r\n    changeFilterCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n    changeSortDateCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n}\r\nexport const Filter: React.FC<FilterPropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={styles.filterWrapper}>\r\n            <FilterStatus filter={props.filter} changeFilterCallback={props.changeFilterCallback}/>\r\n            <SortDate sortDate={props.sortDate} changeSortDateCallback={props.changeSortDateCallback}/>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype FilterStatusPropsType = {\r\n    filter: string, //filterType,\r\n    changeFilterCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n}\r\nexport const FilterStatus: React.FC<FilterStatusPropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={styles.filterStatusWrapper}>\r\n            <div className={styles.name}>\r\n                Статус:\r\n            </div>\r\n            <select value={props.filter}\r\n                    className={styles.select}\r\n                    onChange={props.changeFilterCallback}>\r\n                <option value={'all'}>Все статусы</option>\r\n                <option value={'new'}>new</option>\r\n                <option value={'completed'}>completed</option>\r\n                <option value={'assigned_to'}>assigned_to</option>\r\n                <option value={'started'}>started</option>\r\n                <option value={'declined'}>declined</option>\r\n            </select>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype SortDatePropsType = {\r\n    changeSortDateCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n    sortDate: string,\r\n}\r\nexport const SortDate: React.FC<SortDatePropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={styles.sortDateWrapper}>\r\n            <div className={styles.name}>\r\n                Дата:\r\n            </div>\r\n            <select value={props.sortDate}\r\n                    className={styles.select}\r\n                    onChange={props.changeSortDateCallback}>\r\n                <option value={'direct'}>Сначала поздние</option>\r\n                <option value={'reverse'}>Сначала ранние</option>\r\n            </select>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useCallback, useEffect, useMemo} from \"react\";\r\nimport styles from './Table.module.css'\r\nimport {Pagination} from \"./Pagination/Pagination\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {stateType} from \"../../redux/rootStore\";\r\nimport {\r\n    changeCurrentPage,\r\n    changeFilterValue,\r\n    changePageSize, changeSortDateValue,\r\n    entriesPageType,\r\n    getEntries\r\n} from \"../../redux/entriesReducer\";\r\nimport {fileApi} from \"../../api/fileApi\";\r\nimport {Entry} from \"./Entry/Entry\";\r\nimport {TableHat} from \"./TableHat/TableHat\";\r\nimport {Options} from \"./Options/Options\";\r\nimport {Filter} from \"./Filter/Filter\";\r\n\r\nexport const TableContainer: React.FC = React.memo(() => {\r\n    //initial data\r\n    const state = useSelector<stateType, entriesPageType>(state => state.entriesPage)\r\n    const dispatch = useDispatch()\r\n\r\n    //side-effects\r\n    useEffect(() => {\r\n        const {entries, totalCount} = fileApi.getEntries(state.pageSize, state.currentPage, state.filter, state.sortDate)\r\n        dispatch(getEntries(entries, totalCount))\r\n    }, [state.currentPage, state.pageSize, dispatch, state.filter, state.sortDate])\r\n\r\n    //callbacks\r\n    const changePageSizeCallback = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\r\n        dispatch(changePageSize(Number(e.currentTarget.value)))\r\n    }, [dispatch])\r\n    const changeCurrentPageCallback = useCallback((newCurrentPage: number) => {\r\n        dispatch(changeCurrentPage(newCurrentPage))\r\n    }, [dispatch])\r\n    const totalPages = useMemo(() => {\r\n        return Math.ceil(state.totalCount / state.pageSize)\r\n    }, [state.totalCount, state.pageSize])\r\n    const changeFilterCallback = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\r\n        dispatch(changeFilterValue(e.currentTarget.value))\r\n    }, [dispatch])\r\n    const changeSortDateCallback = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\r\n        dispatch(changeSortDateValue(e.currentTarget.value))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <Table state={state}\r\n               totalPages={totalPages}\r\n               changePageSizeCallback={changePageSizeCallback}\r\n               changeCurrentPageCallback={changeCurrentPageCallback}\r\n               changeFilterCallback={changeFilterCallback}\r\n               changeSortDateCallback={changeSortDateCallback}/>\r\n    )\r\n})\r\n\r\ntype TablePropsType = {\r\n    state: entriesPageType,\r\n    totalPages: number,\r\n    changePageSizeCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n    changeCurrentPageCallback: (newCurrentPage: number) => void,\r\n    changeFilterCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n    changeSortDateCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n}\r\nconst Table: React.FC<TablePropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.optionsWrapper}>\r\n                <Filter filter={props.state.filter}\r\n                        sortDate={props.state.sortDate}\r\n                        changeFilterCallback={props.changeFilterCallback}\r\n                        changeSortDateCallback={props.changeSortDateCallback}/>\r\n                <Options pageSize={props.state.pageSize}\r\n                         changePageSizeCallback={props.changePageSizeCallback}/>\r\n                <Pagination currentPage={props.state.currentPage}\r\n                            totalPages={props.totalPages}\r\n                            changeCurrentPage={props.changeCurrentPageCallback}/>\r\n            </div>\r\n            <TableHat/>\r\n            {\r\n                props.state.entries.map((entry, order) => {\r\n                    return (\r\n                        <Entry entry={entry} order={order} key={order}/>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useEffect} from \"react\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {entryPageStateType, setEntry} from \"../../redux/entryReducer\";\r\nimport {stateType} from \"../../redux/rootStore\";\r\nimport {fileApi} from \"../../api/fileApi\";\r\nimport styles from \"./Entry.module.css\";\r\n\r\ntype PathParamsType = {\r\n    entryId: string,\r\n}\r\n\r\nconst EntrySecret: React.FC<RouteComponentProps<PathParamsType>> = React.memo((props) => {\r\n    //initial data\r\n    const state = useSelector<stateType, entryPageStateType>(state => state.entryPage)\r\n    const dispatch = useDispatch()\r\n\r\n    //side-effects\r\n    useEffect(() => {\r\n        document.title = props.match.params.entryId\r\n        dispatch(setEntry(fileApi.setEntry(+props.match.params.entryId)))\r\n    }, [dispatch, props.match.params.entryId])\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                (state.id !== -1) &&\r\n                <div>\r\n                    <div className={styles.entry}>\r\n                        №{state.id}\r\n                        <hr/>\r\n                        {`${new Date(state.created_date).getDate()}.${new Date(state.created_date).getMonth()}.${new Date(state.created_date).getFullYear()} ${new Date(state.created_date).getHours()}:${new Date(state.created_date).getMinutes()}`}\r\n                        <hr/>\r\n                        {state.order_type.name}\r\n                        <hr/>\r\n                        {`${state.created_user.surname} ${state.created_user.name[0]}.${state.created_user.patronymic[0]}.`}\r\n                        <hr/>\r\n                        {state.account.name}\r\n                        <hr/>\r\n                        {state.terminal.name}\r\n                        <hr/>\r\n                        {state.status}\r\n                        <hr/>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const Entry = withRouter(EntrySecret)","import React, {useEffect} from 'react';\nimport './App.module.css';\nimport {TableContainer} from './components/Table/Table';\nimport styles from './App.module.css'\nimport {HashRouter, NavLink, Route} from \"react-router-dom\";\nimport {Switch} from 'react-router-dom';\nimport {Entry} from \"./components/Entry/Entry\";\n\nconst App: React.FC = React.memo(() => {\n    useEffect(() => {\n        document.title = 'Тестовое задание'\n    }, [])\n\n    return (\n        <HashRouter>\n            <div className={styles.app}>\n                <h1><NavLink to={'/'}>Тестовое задание</NavLink></h1>\n                <Switch>\n                    <Route path={'/'} exact render={() => <TableContainer/>}/>\n                    <Route path={'/order/:entryId'} render={() => <Entry/>}/>\n                </Switch>\n            </div>\n        </HashRouter>\n    )\n})\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {\r\n    changeCurrentPageActionType, changeFilterActionType,\r\n    changePageSizeActionType, changeSortDateValueActionType,\r\n    entriesReducer,\r\n    getEntriesActionType,\r\n    testActionType\r\n} from \"./entriesReducer\";\r\nimport {entryReducer, setEntryActionType} from \"./entryReducer\";\r\n\r\n//types\r\nexport type actionsType =\r\n    testActionType\r\n    | getEntriesActionType\r\n    | changeCurrentPageActionType\r\n    | changePageSizeActionType\r\n    | setEntryActionType\r\n    | changeFilterActionType\r\n    | changeSortDateValueActionType\r\n\r\nexport type stateType = ReturnType<typeof store.getState>\r\nexport type dispatchType = typeof store.dispatch\r\n\r\nconst reducers = combineReducers({\r\n        entriesPage: entriesReducer,\r\n        entryPage: entryReducer,\r\n    }\r\n)\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunk))\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/rootStore\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Table_wrapper__1ItqM\",\"hat\":\"Table_hat__-MJ_c\",\"row\":\"Table_row__1W1qc\",\"optionsWrapper\":\"Table_optionsWrapper__34Aq8\",\"even\":\"Table_even__VsG8M\",\"bottom\":\"Table_bottom__2EBDT\"};"],"sourceRoot":""}
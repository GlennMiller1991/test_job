{"version":3,"sources":["components/Table/Pagination/Pagination.module.css","App.module.css","components/Entry/Entry.module.css","components/Table/Pagination/Pagination.tsx","redux/entriesReducer.ts","redux/entryReducer.ts","api/fileApi.ts","components/Table/Entry/Entry.tsx","components/Table/TableHat/TableHat.tsx","components/Table/Options/Options.tsx","components/Table/Table.tsx","components/Entry/Entry.tsx","App.tsx","reportWebVitals.ts","redux/rootStore.ts","index.tsx","components/Table/Table.module.css"],"names":["module","exports","Pagination","React","memo","props","console","log","className","styles","pages","changePage","onClick","e","changeCurrentPage","currentPage","lastPage","totalPages","GET_ENTRIES","CHANGE_CURRENT_PAGE","CHANGE_PAGE_SIZE","initialData","entries","totalCount","data","length","pageSize","SET_ENTRY","emptyEntry","id","oguid","status","order_type","name","terminal","account","created_user","surname","patronymic","created_date","initialState","fileApi","slice","entryId","entry","find","Entry","date","Date","activeClassName","active","to","row","order","even","bottom","getDate","getMonth","getFullYear","getHours","getMinutes","TableHat","hat","Options","onChange","changePageSizeCallback","value","TableContainer","state","useSelector","entriesPage","dispatch","useDispatch","useEffect","type","payload","getEntries","useCallback","Number","currentTarget","changeCurrentPageCallback","newCurrentPage","useMemo","Math","ceil","Table","wrapper","optionsWrapper","map","EntrySecret","entryPage","document","title","match","params","withRouter","App","app","path","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.79bbf8e0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"changePage\":\"Pagination_changePage__M9Egl\",\"lastPage\":\"Pagination_lastPage__2yR6-\",\"pages\":\"Pagination_pages__3uuBj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__eCSbw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"entry\":\"Entry_entry__1GJCC\"};","import React from \"react\";\r\nimport styles from \"./Pagination.module.css\";\r\n\r\ntype PaginationPropsType = {\r\n    totalPages: number,\r\n    currentPage: number,\r\n    changeCurrentPage: (newCurrentPage: number) => void,\r\n}\r\n\r\nexport const Pagination: React.FC<PaginationPropsType> = React.memo((props) => {\r\n    console.log('from Pagination')\r\n    return (\r\n        <div className={styles.pages}>\r\n                    <span className={styles.changePage}\r\n                          onClick={(e) => {\r\n                              props.changeCurrentPage(props.currentPage === 1 ? 1 : props.currentPage - 1)\r\n                          }}>\r\n                        Предыдущая\r\n                    </span>\r\n            <span className={styles.currentPage}>\r\n                        {props.currentPage}/\r\n                    </span>\r\n            <span className={styles.lastPage}\r\n                  onClick={(e) => {\r\n                      props.changeCurrentPage(props.totalPages)\r\n                  }}>\r\n                        {props.totalPages}\r\n                    </span>\r\n            <span className={styles.changePage}\r\n                  onClick={(e) => {\r\n                      props.changeCurrentPage(props.currentPage === props.totalPages ? props.totalPages : props.currentPage + 1)\r\n                  }}>\r\n                        Следующая\r\n                    </span>\r\n        </div>\r\n    )\r\n})\r\n","import data from '../api/initialData.json'\r\nimport {actionsType} from \"./rootStore\";\r\n\r\n//constants\r\nconst TEST = 'TEST'\r\nconst GET_ENTRIES = 'GET-ENTRIES'\r\nconst CHANGE_CURRENT_PAGE = 'CHANGE-CURRENT-PAGE'\r\nconst CHANGE_PAGE_SIZE = 'CHANGE-PAGE-SIZE'\r\n\r\n//types\r\nexport type entryType = {\r\n    id: number,\r\n    oguid: string,\r\n    status: string,\r\n    order_type: {\r\n        name: string,\r\n        oguid: string,\r\n    },\r\n    terminal: {\r\n        name: string,\r\n        oguid: string,\r\n    },\r\n    account: {\r\n        name: string,\r\n        oguid: string,\r\n    },\r\n    created_user: {\r\n        surname: string,\r\n        name: string,\r\n        patronymic: string,\r\n        oguid: string,\r\n    },\r\n    created_date: number,\r\n}\r\nexport type entriesPageType = {\r\n    entries: entryType[],\r\n    totalCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n}\r\n\r\n//action types\r\nexport type testActionType = ReturnType<typeof test>\r\nexport type getEntriesActionType = ReturnType<typeof getEntries>\r\nexport type changeCurrentPageActionType = ReturnType<typeof changeCurrentPage>\r\nexport type changePageSizeActionType = ReturnType<typeof changePageSize>\r\n\r\n//action and thunk creators\r\nexport const test = () => {\r\n    return {\r\n        type: TEST,\r\n        payload: {}\r\n    } as const\r\n}\r\nexport const getEntries = (entries: entryType[]) => {\r\n    return {\r\n        type: GET_ENTRIES,\r\n        payload: {\r\n            entries,\r\n        }\r\n    } as const\r\n}\r\nexport const changeCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: CHANGE_CURRENT_PAGE,\r\n        payload: {\r\n            currentPage,\r\n        }\r\n    } as const\r\n}\r\nexport const changePageSize = (pageSize: number) => {\r\n    return {\r\n        type: CHANGE_PAGE_SIZE,\r\n        payload: {\r\n            pageSize,\r\n        }\r\n    } as const\r\n}\r\nconst initialData: entriesPageType = {\r\n    entries: [],\r\n    totalCount: data.length,\r\n    pageSize: 3,\r\n    currentPage: 1,\r\n}\r\n\r\nexport const entriesReducer = (state: entriesPageType = initialData, action: actionsType) => {\r\n    switch (action.type) {\r\n        case GET_ENTRIES:\r\n        case CHANGE_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case CHANGE_PAGE_SIZE:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                currentPage: 1,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {actionsType} from \"./rootStore\";\r\nimport {entryType} from \"./entriesReducer\";\r\n\r\n//constants\r\nconst SET_ENTRY = 'SET-ENTRY'\r\nexport const emptyEntry = {\r\n    id: -1,\r\n    oguid: '',\r\n    status: '',\r\n    order_type: {\r\n        name: '',\r\n        oguid: '',\r\n    },\r\n    terminal: {\r\n        name: '',\r\n        oguid: '',\r\n    },\r\n    account: {\r\n        name: '',\r\n        oguid: '',\r\n    },\r\n    created_user: {\r\n        surname: '',\r\n        name: '',\r\n        patronymic: '',\r\n        oguid: '',\r\n    },\r\n    created_date: 0,\r\n}\r\n//types\r\nexport type entryPageStateType = entryType\r\nexport type setEntryActionType = ReturnType<typeof setEntry>\r\n\r\n//action and thunk creators\r\nexport const setEntry = (entry: entryType) => {\r\n    return {\r\n        type: SET_ENTRY,\r\n        payload: {\r\n            ...entry,\r\n        }\r\n    } as const\r\n}\r\n\r\n//data\r\nconst initialState: entryPageStateType = emptyEntry\r\n\r\n\r\nexport const entryReducer = (state= initialState, action: actionsType) => {\r\n    switch(action.type) {\r\n        case SET_ENTRY:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import data from './initialData.json'\r\nimport {emptyEntry} from \"../redux/entryReducer\";\r\n\r\nexport const fileApi = {\r\n    getEntries(pageSize: number, currentPage: number) {\r\n        return data.slice((currentPage - 1) * pageSize, currentPage * pageSize)\r\n    },\r\n    setEntry(entryId: number) {\r\n        const entry = data.find(entry => entry.id === entryId)\r\n        return (\r\n            entry ? entry : emptyEntry\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {entryType} from \"../../../redux/entriesReducer\";\r\nimport styles from '../Table.module.css'\r\n\r\ntype EntryPropsType = {\r\n    entry: entryType,\r\n    order: number,\r\n}\r\n\r\nexport const Entry: React.FC<EntryPropsType> = React.memo((props) => {\r\n    console.log('from entry')\r\n    const date = new Date(props.entry.created_date)\r\n    const entry = props.entry\r\n    return (\r\n        <NavLink activeClassName={styles.active}\r\n                 to={`/order/${entry.id}`} key={entry.oguid}>\r\n            <div className={`${styles.row} ${props.order % 2 === 0 ? styles.even : ''}`}>\r\n                <div>\r\n                    <div>№{entry.id}</div>\r\n                    <div className={styles.bottom}>\r\n                        {`${date.getDate()}.${date.getMonth()}.${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}`}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        {entry.order_type.name}\r\n                    </div>\r\n                    <div className={styles.bottom}>\r\n                        {`${entry.created_user.surname} ${entry.created_user.name[0]}.${entry.created_user.patronymic[0]}.`}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div>{entry.account.name}</div>\r\n                    <div className={styles.bottom}>{entry.terminal.name}</div>\r\n                </div>\r\n                <div>\r\n                    <div>{entry.status}</div>\r\n                </div>\r\n            </div>\r\n        </NavLink>\r\n    )\r\n})","import React from \"react\";\r\nimport styles from \"../Table.module.css\";\r\n\r\nexport const TableHat: React.FC = React.memo(() => {\r\n    console.log('from table hat')\r\n    return (\r\n        <div className={`${styles.hat}`}>\r\n            <div>Номер/дата</div>\r\n            <div>Тип задания/автор</div>\r\n            <div>Аккаунт/Терминал</div>\r\n            <div>Статус</div>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent} from \"react\";\r\nimport styles from \"../Table.module.css\";\r\n\r\ntype OptionsPropsType = {\r\n    changePageSizeCallback: (e: ChangeEvent<HTMLSelectElement>) => void\r\n}\r\n\r\nexport const Options: React.FC<OptionsPropsType> = React.memo((props) => {\r\n    console.log('from options')\r\n    return (\r\n            <div>\r\n                Показывать по\r\n                <select onChange={props.changePageSizeCallback}>\r\n                    <option value={3}>3</option>\r\n                    <option value={10}>10</option>\r\n                    <option value={25}>25</option>\r\n                </select>\r\n            </div>\r\n    )\r\n})","import React, {ChangeEvent, useCallback, useEffect, useMemo} from \"react\";\r\nimport styles from './Table.module.css'\r\nimport {Pagination} from \"./Pagination/Pagination\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {stateType} from \"../../redux/rootStore\";\r\nimport {changeCurrentPage, changePageSize, entriesPageType, entryType, getEntries} from \"../../redux/entriesReducer\";\r\nimport {fileApi} from \"../../api/fileApi\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Entry} from \"./Entry/Entry\";\r\nimport {TableHat} from \"./TableHat/TableHat\";\r\nimport {Options} from \"./Options/Options\";\r\n\r\nexport const TableContainer: React.FC = React.memo(() => {\r\n    console.log('from TableContainer')\r\n\r\n    //initial data\r\n    const state = useSelector<stateType, entriesPageType>(state => state.entriesPage)\r\n    const dispatch = useDispatch()\r\n\r\n    //side-effects\r\n    useEffect(() => {\r\n        const entries: entryType[] = fileApi.getEntries(state.pageSize, state.currentPage)\r\n        dispatch(getEntries(entries))\r\n    }, [state.currentPage, state.pageSize, dispatch])\r\n\r\n    //callbacks\r\n    const changePageSizeCallback = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\r\n        dispatch(changePageSize(Number(e.currentTarget.value)))\r\n    }, [dispatch])\r\n    const changeCurrentPageCallback = useCallback((newCurrentPage: number) => {\r\n        dispatch(changeCurrentPage(newCurrentPage))\r\n    }, [dispatch])\r\n    const totalPages = useMemo(() => {\r\n        console.log('from useMemo')\r\n        return Math.ceil(state.totalCount / state.pageSize)\r\n    }, [state.totalCount, state.pageSize])\r\n\r\n    return (\r\n        <Table state={state}\r\n               totalPages={totalPages}\r\n               changePageSizeCallback={changePageSizeCallback}\r\n               changeCurrentPageCallback={changeCurrentPageCallback}/>\r\n    )\r\n})\r\n\r\ntype TablePropsType = {\r\n    state: entriesPageType,\r\n    totalPages: number,\r\n    changePageSizeCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n    changeCurrentPageCallback: (newCurrentPage: number) => void,\r\n}\r\nconst Table: React.FC<TablePropsType> = React.memo((props) => {\r\n    console.log('from Table')\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.optionsWrapper}>\r\n                <Options changePageSizeCallback={props.changePageSizeCallback}/>\r\n                <Pagination currentPage={props.state.currentPage}\r\n                            totalPages={props.totalPages}\r\n                            changeCurrentPage={props.changeCurrentPageCallback}/>\r\n            </div>\r\n            <TableHat/>\r\n            {\r\n                props.state.entries.map((entry, order) => {\r\n                    return (\r\n                        <Entry entry={entry} order={order} key={order}/>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n})","import React, {useEffect} from \"react\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {entryPageStateType, setEntry} from \"../../redux/entryReducer\";\r\nimport {stateType} from \"../../redux/rootStore\";\r\nimport {fileApi} from \"../../api/fileApi\";\r\nimport styles from \"./Entry.module.css\";\r\n\r\ntype PathParamsType = {\r\n    entryId: string,\r\n}\r\n\r\nconst EntrySecret: React.FC<RouteComponentProps<PathParamsType>> = React.memo((props) => {\r\n    console.log('from entry')\r\n    //initial data\r\n    const state = useSelector<stateType, entryPageStateType>(state => state.entryPage)\r\n    const dispatch = useDispatch()\r\n\r\n    //side-effects\r\n    useEffect(() => {\r\n        document.title = props.match.params.entryId\r\n        dispatch(setEntry(fileApi.setEntry(+props.match.params.entryId)))\r\n    }, [dispatch, props.match.params.entryId])\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                (state.id !== -1) &&\r\n                <div>\r\n                    <div className={styles.entry}>\r\n                        №{state.id}\r\n                        <hr/>\r\n                        {`${new Date(state.created_date).getDate()}.${new Date(state.created_date).getMonth()}.${new Date(state.created_date).getFullYear()} ${new Date(state.created_date).getHours()}:${new Date(state.created_date).getMinutes()}`}\r\n                        <hr/>\r\n                        {state.order_type.name}\r\n                        <hr/>\r\n                        {`${state.created_user.surname} ${state.created_user.name[0]}.${state.created_user.patronymic[0]}.`}\r\n                        <hr/>\r\n                        {state.account.name}\r\n                        <hr/>\r\n                        {state.terminal.name}\r\n                        <hr/>\r\n                        {state.status}\r\n                        <hr/>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const Entry = withRouter(EntrySecret)","import React, {useEffect} from 'react';\nimport './App.module.css';\nimport {TableContainer} from './components/Table/Table';\nimport styles from './App.module.css'\nimport {HashRouter, NavLink, Route} from \"react-router-dom\";\nimport {Switch} from 'react-router-dom';\nimport {Entry} from \"./components/Entry/Entry\";\n\nconst App: React.FC = React.memo(() => {\n    useEffect(() => {\n        document.title = 'Тестовое задание'\n    }, [])\n\n    return (\n        <HashRouter>\n            <div className={styles.app}>\n                <h1><NavLink to={'/'}>Тестовое задание</NavLink></h1>\n                <Switch>\n                    <Route path={'/'} exact render={() => <TableContainer/>}/>\n                    <Route path={'/order/:entryId'} render={() => <Entry/>}/>\n                </Switch>\n            </div>\n        </HashRouter>\n    )\n})\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {\r\n    changeCurrentPageActionType,\r\n    changePageSizeActionType,\r\n    entriesReducer,\r\n    getEntriesActionType,\r\n    testActionType\r\n} from \"./entriesReducer\";\r\nimport {entryReducer, setEntryActionType} from \"./entryReducer\";\r\n\r\n//types\r\nexport type actionsType =\r\n    testActionType\r\n    | getEntriesActionType\r\n    | changeCurrentPageActionType\r\n    | changePageSizeActionType\r\n    | setEntryActionType\r\n\r\nexport type stateType = ReturnType<typeof store.getState>\r\nexport type dispatchType = typeof store.dispatch\r\n\r\nconst reducers = combineReducers({\r\n        entriesPage: entriesReducer,\r\n        entryPage: entryReducer,\r\n    }\r\n)\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunk))\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/rootStore\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Table_wrapper__1ItqM\",\"hat\":\"Table_hat__-MJ_c\",\"row\":\"Table_row__1W1qc\",\"optionsWrapper\":\"Table_optionsWrapper__34Aq8\",\"even\":\"Table_even__VsG8M\",\"bottom\":\"Table_bottom__2EBDT\"};"],"sourceRoot":""}
{"version":3,"sources":["components/Table/Filter/FIlter.module.css","components/Table/Pagination/Pagination.module.css","components/Entry/Entry.module.css","App.module.css","components/Table/Options/Options.module.css","components/Table/Pagination/LastPage/LastPage.tsx","components/Table/Pagination/Pagination.tsx","redux/entriesReducer.ts","redux/entryReducer.ts","api/fileApi.ts","components/Table/Entry/Entry.tsx","components/Table/TableHat/TableHat.tsx","components/Table/Options/Options.tsx","components/Table/Filter/Filter.tsx","components/Table/Table.tsx","components/Entry/EntryInfo/EntryInfo.tsx","components/Entry/EntryEdit/EntryEdit.tsx","common/preloader.gif","components/Entry/Entry.tsx","App.tsx","reportWebVitals.ts","redux/rootStore.ts","index.tsx","components/Table/Table.module.css"],"names":["module","exports","LastPage","React","memo","props","className","styles","lastPage","onClick","e","changeCurrentPageHandler","totalPages","Pagination","pages","changePage","currentPage","changeCurrentPage","GET_ENTRIES","CHANGE_CURRENT_PAGE","CHANGE_PAGE_SIZE","CHANGE_FILTER","CHANGE_SORT_DATE_VALUE","getEntries","entries","totalCount","type","payload","initialData","data","length","pageSize","filter","sortDate","SET_ENTRY","emptyEntry","id","oguid","status","order_type","name","terminal","account","created_user","surname","patronymic","created_date","setEntry","entry","initialState","datas","fileApi","filterDate","entryArray","sort","directSort","reverseSort","slice","entryId","find","newEntry","map","first","second","Entry","date","Date","activeClassName","active","to","row","order","even","bottom","getDate","getMonth","getFullYear","getHours","getMinutes","TableHat","hat","Options","optionsWrapper","select","value","onChange","changePageSizeCallback","Filter","filterWrapper","FilterStatus","changeFilterCallback","SortDate","changeSortDateCallback","filterStatusWrapper","sortDateWrapper","TableContainer","console","log","state","useSelector","entriesPage","dispatch","useDispatch","useCallback","Number","currentTarget","changeCurrentPageCallback","newCurrentPage","useMemo","Math","ceil","useEffect","Table","wrapper","EntryInfo","onEditButtonCallback","EntryEdit","useState","setStatus","autoFocus","func","onChangeCallback","onSaveButtonCallback","EntrySecret","entryPage","entriesState","editMode","setEditMode","document","title","match","params","Fragment","src","preLoader","alt","withRouter","App","app","path","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.83b23402.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterWrapper\":\"FIlter_filterWrapper__1NeyE\",\"filterStatusWrapper\":\"FIlter_filterStatusWrapper__1hpJH\",\"sortDateWrapper\":\"FIlter_sortDateWrapper__1PjsM\",\"select\":\"FIlter_select__2-j0p\",\"name\":\"FIlter_name__7_ArX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"changePage\":\"Pagination_changePage__M9Egl\",\"lastPage\":\"Pagination_lastPage__2yR6-\",\"pages\":\"Pagination_pages__3uuBj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"entry\":\"Entry_entry__1GJCC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__eCSbw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"optionsSelect\":\"Options_optionsSelect__5qUrk\",\"select\":\"Options_select__2c-pH\"};","import React from \"react\";\r\nimport styles from \"../Pagination.module.css\";\r\n\r\ntype LastPagePropsType = {\r\n    totalPages: number,\r\n    changeCurrentPageHandler: (newCurrentPage: number) => void,\r\n}\r\nexport const LastPage: React.FC<LastPagePropsType> = React.memo((props) => {\r\n    return (\r\n        <span className={styles.lastPage}\r\n              onClick={(e) => {\r\n                  props.changeCurrentPageHandler(props.totalPages)\r\n              }}>\r\n                        {props.totalPages}\r\n                    </span>\r\n    )\r\n})","import React from \"react\";\r\nimport styles from \"./Pagination.module.css\";\r\nimport {LastPage} from \"./LastPage/LastPage\";\r\n\r\ntype PaginationPropsType = {\r\n    totalPages: number,\r\n    currentPage: number,\r\n    changeCurrentPage: (newCurrentPage: number) => void,\r\n}\r\n\r\nexport const Pagination: React.FC<PaginationPropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={styles.pages}>\r\n                    <span className={styles.changePage}\r\n                          onClick={(e) => {\r\n                              props.currentPage !== 1 && props.changeCurrentPage(props.currentPage - 1)\r\n                          }}>\r\n                        Предыдущая\r\n                    </span>\r\n            <span className={styles.currentPage}>\r\n                        {props.currentPage}/\r\n                    </span>\r\n            <LastPage totalPages={props.totalPages} changeCurrentPageHandler={props.changeCurrentPage}/>\r\n            <span className={styles.changePage}\r\n                  onClick={(e) => {\r\n                      props.currentPage !== props.totalPages && props.changeCurrentPage(props.currentPage + 1)\r\n                  }}>\r\n                        Следующая\r\n                    </span>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import data from '../api/initialData.json'\r\nimport {actionsType} from \"./rootStore\";\r\n\r\n//constants\r\nconst TEST = 'TEST'\r\nconst GET_ENTRIES = 'GET-ENTRIES'\r\nconst CHANGE_CURRENT_PAGE = 'CHANGE-CURRENT-PAGE'\r\nconst CHANGE_PAGE_SIZE = 'CHANGE-PAGE-SIZE'\r\nconst CHANGE_FILTER = 'CHANGE-FILTER'\r\nconst CHANGE_SORT_DATE_VALUE = 'CHANGE-SORT-DATE-VALUE'\r\n\r\n//types\r\nexport type filterType = 'all' | 'new' | 'completed' | 'assigned_to' | 'started' | 'declined'\r\nexport type entryType = {\r\n    id: number,\r\n    oguid: string,\r\n    status: string,\r\n    order_type: {\r\n        name: string,\r\n        oguid: string,\r\n    },\r\n    terminal: {\r\n        name: string,\r\n        oguid: string,\r\n    },\r\n    account: {\r\n        name: string,\r\n        oguid: string,\r\n    },\r\n    created_user: {\r\n        surname: string,\r\n        name: string,\r\n        patronymic: string,\r\n        oguid: string,\r\n    },\r\n    created_date: number,\r\n}\r\nexport type entriesPageType = {\r\n    entries: entryType[],\r\n    totalCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    filter: string, //filterType,\r\n    sortDate: string,\r\n}\r\n\r\n//action types\r\nexport type testActionType = ReturnType<typeof test>\r\nexport type getEntriesActionType = ReturnType<typeof getEntries>\r\nexport type changeCurrentPageActionType = ReturnType<typeof changeCurrentPage>\r\nexport type changePageSizeActionType = ReturnType<typeof changePageSize>\r\nexport type changeFilterActionType = ReturnType<typeof changeFilterValue>\r\nexport type changeSortDateValueActionType = ReturnType<typeof changeSortDateValue>\r\n\r\n//action and thunk creators\r\nexport const test = () => {\r\n    return {\r\n        type: TEST,\r\n        payload: {}\r\n    } as const\r\n}\r\nexport const getEntries = (entries: entryType[], totalCount: number, currentPage: number) => {\r\n    return {\r\n        type: GET_ENTRIES,\r\n        payload: {\r\n            entries,\r\n            totalCount,\r\n            currentPage,\r\n        }\r\n    } as const\r\n}\r\nexport const changeCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: CHANGE_CURRENT_PAGE,\r\n        payload: {\r\n            currentPage,\r\n        }\r\n    } as const\r\n}\r\nexport const changePageSize = (pageSize: number) => {\r\n    return {\r\n        type: CHANGE_PAGE_SIZE,\r\n        payload: {\r\n            pageSize,\r\n        }\r\n    } as const\r\n}\r\nexport const changeFilterValue = (filter: string /*filterType*/) => {\r\n    return {\r\n        type: CHANGE_FILTER,\r\n        payload: {\r\n            filter,\r\n        }\r\n    } as const\r\n}\r\nexport const changeSortDateValue = (sortDate: string) => {\r\n    return {\r\n        type: CHANGE_SORT_DATE_VALUE,\r\n        payload: {\r\n            sortDate,\r\n        }\r\n    } as const\r\n}\r\n\r\nconst initialData: entriesPageType = {\r\n    entries: [],\r\n    totalCount: data.length,\r\n    pageSize: 3,\r\n    currentPage: 1,\r\n    filter: 'all',\r\n    sortDate: 'direct',\r\n}\r\n\r\nexport const entriesReducer = (state: entriesPageType = initialData, action: actionsType) => {\r\n    switch (action.type) {\r\n        case GET_ENTRIES:\r\n        case CHANGE_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case CHANGE_FILTER:\r\n        case CHANGE_PAGE_SIZE:\r\n        case CHANGE_SORT_DATE_VALUE:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                currentPage: 1,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {actionsType} from \"./rootStore\";\r\nimport {entryType} from \"./entriesReducer\";\r\n\r\n//constants\r\nconst SET_ENTRY = 'SET-ENTRY'\r\nexport const emptyEntry = {\r\n    id: -1,\r\n    oguid: '',\r\n    status: '',\r\n    order_type: {\r\n        name: '',\r\n        oguid: '',\r\n    },\r\n    terminal: {\r\n        name: '',\r\n        oguid: '',\r\n    },\r\n    account: {\r\n        name: '',\r\n        oguid: '',\r\n    },\r\n    created_user: {\r\n        surname: '',\r\n        name: '',\r\n        patronymic: '',\r\n        oguid: '',\r\n    },\r\n    created_date: 0,\r\n}\r\n//types\r\nexport type entryPageStateType = entryType\r\nexport type setEntryActionType = ReturnType<typeof setEntry>\r\n\r\n//action and thunk creators\r\nexport const setEntry = (entry: entryType) => {\r\n    return {\r\n        type: SET_ENTRY,\r\n        payload: {\r\n            ...entry,\r\n        }\r\n    } as const\r\n}\r\n\r\n//data\r\nconst initialState: entryPageStateType = emptyEntry\r\n\r\n\r\nexport const entryReducer = (state= initialState, action: actionsType) => {\r\n    switch(action.type) {\r\n        case SET_ENTRY:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import datas from './initialData.json'\r\nimport {emptyEntry} from \"../redux/entryReducer\";\r\nimport {entryType} from \"../redux/entriesReducer\";\r\n\r\nlet data = datas\r\n\r\nexport const fileApi = {\r\n    getEntries(pageSize: number, currentPage: number, filter: string, filterDate: string) {\r\n        //filter\r\n        let entryArray = filter === 'all' ? data : data.filter(entry => entry.status === filter)\r\n\r\n        //sort\r\n        if (filterDate === 'direct') {\r\n            entryArray.sort(directSort)\r\n        } else {\r\n            entryArray.sort(reverseSort)\r\n        }\r\n\r\n        return {entries: entryArray.slice((currentPage - 1) * pageSize, currentPage * pageSize), totalCount: entryArray.length}\r\n    },\r\n    setEntry(entryId: number) {\r\n        const entry = data.find(entry => entry.id === entryId)\r\n        return (\r\n            entry ? entry : emptyEntry\r\n        )\r\n    },\r\n    renewData(newEntry: entryType) {\r\n        data = data.map(entry => entry.id === newEntry.id ? newEntry : entry)\r\n    }\r\n}\r\n\r\n//tools\r\nconst directSort = (first: entryType, second: entryType) => {\r\n    return first.created_date > second.created_date ? -1 : 1\r\n}\r\nconst reverseSort = (first: entryType, second: entryType) => {\r\n    return first.created_date > second.created_date ? 1 : -1\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {entryType} from \"../../../redux/entriesReducer\";\r\nimport styles from '../Table.module.css'\r\n\r\ntype EntryPropsType = {\r\n    entry: entryType,\r\n    order: number,\r\n}\r\n\r\nexport const Entry: React.FC<EntryPropsType> = React.memo((props) => {\r\n    const date = new Date(props.entry.created_date)\r\n    const entry = props.entry\r\n    return (\r\n        <NavLink activeClassName={styles.active}\r\n                 to={`/order/${entry.id}`} key={entry.oguid}>\r\n            <div className={`${styles.row} ${props.order % 2 === 0 ? styles.even : ''}`}>\r\n                <div>\r\n                    <div>№{entry.id}</div>\r\n                    <div className={styles.bottom}>\r\n                        {`${date.getDate()}.${date.getMonth()}.${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}`}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        {entry.order_type.name}\r\n                    </div>\r\n                    <div className={styles.bottom}>\r\n                        {`${entry.created_user.surname} ${entry.created_user.name[0]}.${entry.created_user.patronymic[0]}.`}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div>{entry.account.name}</div>\r\n                    <div className={styles.bottom}>{entry.terminal.name}</div>\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        {entry.status}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </NavLink>\r\n    )\r\n})","import React from \"react\";\r\nimport styles from \"../Table.module.css\";\r\n\r\nexport const TableHat: React.FC = React.memo(() => {\r\n    return (\r\n        <div className={`${styles.hat}`}>\r\n            <div>Номер/дата</div>\r\n            <div>Тип задания/автор</div>\r\n            <div>Аккаунт/Терминал</div>\r\n            <div>Статус</div>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent} from \"react\";\r\nimport styles from './Options.module.css'\r\n\r\ntype OptionsPropsType = {\r\n    pageSize: number,\r\n    changePageSizeCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n}\r\n\r\nexport const Options: React.FC<OptionsPropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={styles.optionsWrapper}>\r\n            Показывать по\r\n            <select className={styles.select}\r\n                    value={props.pageSize} onChange={props.changePageSizeCallback}>\r\n                <option value={3}>3</option>\r\n                <option value={10}>10</option>\r\n                <option value={25}>25</option>\r\n            </select>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent} from \"react\";\r\nimport styles from './FIlter.module.css'\r\n\r\ntype FilterPropsType = {\r\n    filter: string, //filterType,\r\n    sortDate: string,\r\n    changeFilterCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n    changeSortDateCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n}\r\nexport const Filter: React.FC<FilterPropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={styles.filterWrapper}>\r\n            <FilterStatus filter={props.filter} changeFilterCallback={props.changeFilterCallback}/>\r\n            <SortDate sortDate={props.sortDate} changeSortDateCallback={props.changeSortDateCallback}/>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype FilterStatusPropsType = {\r\n    filter: string, //filterType,\r\n    changeFilterCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n}\r\nexport const FilterStatus: React.FC<FilterStatusPropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={styles.filterStatusWrapper}>\r\n            <div className={styles.name}>\r\n                Статус:\r\n            </div>\r\n            <select value={props.filter}\r\n                    className={styles.select}\r\n                    onChange={props.changeFilterCallback}>\r\n                <option value={'all'}>Все статусы</option>\r\n                <option value={'new'}>new</option>\r\n                <option value={'completed'}>completed</option>\r\n                <option value={'assigned_to'}>assigned_to</option>\r\n                <option value={'started'}>started</option>\r\n                <option value={'declined'}>declined</option>\r\n            </select>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype SortDatePropsType = {\r\n    changeSortDateCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n    sortDate: string,\r\n}\r\nexport const SortDate: React.FC<SortDatePropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={styles.sortDateWrapper}>\r\n            <div className={styles.name}>\r\n                Дата:\r\n            </div>\r\n            <select value={props.sortDate}\r\n                    className={styles.select}\r\n                    onChange={props.changeSortDateCallback}>\r\n                <option value={'direct'}>Сначала поздние</option>\r\n                <option value={'reverse'}>Сначала ранние</option>\r\n            </select>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useCallback, useEffect, useMemo} from \"react\";\r\nimport styles from './Table.module.css'\r\nimport {Pagination} from \"./Pagination/Pagination\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {stateType} from \"../../redux/rootStore\";\r\nimport {\r\n    changeCurrentPage,\r\n    changeFilterValue,\r\n    changePageSize, changeSortDateValue,\r\n    entriesPageType,\r\n    getEntries\r\n} from \"../../redux/entriesReducer\";\r\nimport {fileApi} from \"../../api/fileApi\";\r\nimport {Entry} from \"./Entry/Entry\";\r\nimport {TableHat} from \"./TableHat/TableHat\";\r\nimport {Options} from \"./Options/Options\";\r\nimport {Filter} from \"./Filter/Filter\";\r\n\r\nexport const TableContainer: React.FC = React.memo(() => {\r\n    console.log('from table')\r\n    //initial data\r\n    const state = useSelector<stateType, entriesPageType>(state => state.entriesPage)\r\n    const dispatch = useDispatch()\r\n\r\n    //callbacks\r\n    const changePageSizeCallback = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\r\n        dispatch(changePageSize(Number(e.currentTarget.value)))\r\n    }, [dispatch])\r\n    const changeCurrentPageCallback = useCallback((newCurrentPage: number) => {\r\n        dispatch(changeCurrentPage(newCurrentPage))\r\n    }, [dispatch])\r\n    const totalPages = useMemo(() => {\r\n        return Math.ceil(state.totalCount / state.pageSize)\r\n    }, [state.totalCount, state.pageSize])\r\n    const changeFilterCallback = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\r\n        dispatch(changeFilterValue(e.currentTarget.value))\r\n    }, [dispatch])\r\n    const changeSortDateCallback = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\r\n        dispatch(changeSortDateValue(e.currentTarget.value))\r\n    }, [dispatch])\r\n\r\n    //side-effects\r\n    useEffect(() => {\r\n        const {entries, totalCount} = fileApi.getEntries(state.pageSize, state.currentPage, state.filter, state.sortDate)\r\n        if (totalCount) {\r\n            if (entries.length) dispatch(getEntries(entries, totalCount, state.currentPage))\r\n            else dispatch(getEntries(entries, totalCount, 1))\r\n        } else {\r\n            dispatch(getEntries(entries, totalCount, 0))\r\n        }\r\n    }, [state.currentPage, state.pageSize, dispatch, state.filter, state.sortDate])\r\n\r\n    return (\r\n        <Table state={state}\r\n               totalPages={totalPages}\r\n               changePageSizeCallback={changePageSizeCallback}\r\n               changeCurrentPageCallback={changeCurrentPageCallback}\r\n               changeFilterCallback={changeFilterCallback}\r\n               changeSortDateCallback={changeSortDateCallback}/>\r\n    )\r\n})\r\n\r\ntype TablePropsType = {\r\n    state: entriesPageType,\r\n    totalPages: number,\r\n    changePageSizeCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n    changeCurrentPageCallback: (newCurrentPage: number) => void,\r\n    changeFilterCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n    changeSortDateCallback: (e: ChangeEvent<HTMLSelectElement>) => void,\r\n}\r\nconst Table: React.FC<TablePropsType> = React.memo((props) => {\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.optionsWrapper}>\r\n                <Filter filter={props.state.filter}\r\n                        sortDate={props.state.sortDate}\r\n                        changeFilterCallback={props.changeFilterCallback}\r\n                        changeSortDateCallback={props.changeSortDateCallback}/>\r\n                <Options pageSize={props.state.pageSize}\r\n                         changePageSizeCallback={props.changePageSizeCallback}/>\r\n                <Pagination currentPage={props.state.currentPage}\r\n                            totalPages={props.totalPages}\r\n                            changeCurrentPage={props.changeCurrentPageCallback}/>\r\n            </div>\r\n            <TableHat/>\r\n            {\r\n                props.state.entries.map((entry, order) => {\r\n                    return (\r\n                        <Entry entry={entry} order={order} key={order}/>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\n","import {entryPageStateType} from \"../../../redux/entryReducer\";\r\nimport React from \"react\";\r\nimport styles from \"../Entry.module.css\";\r\n\r\ntype EntryInfoPropsType = {\r\n    state: entryPageStateType,\r\n    onEditButtonCallback: () => void\r\n}\r\nexport const EntryInfo: React.FC<EntryInfoPropsType> = React.memo((props) => {\r\n    console.log('from entryInfo')\r\n    const state = props.state\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className={styles.entry}>\r\n                    №{state.id}\r\n                    <hr/>\r\n                    {`${new Date(state.created_date).getDate()}.${new Date(state.created_date).getMonth()}.${new Date(state.created_date).getFullYear()} ${new Date(state.created_date).getHours()}:${new Date(state.created_date).getMinutes()}`}\r\n                    <hr/>\r\n                    {state.order_type.name}\r\n                    <hr/>\r\n                    {`${state.created_user.surname} ${state.created_user.name[0]}.${state.created_user.patronymic[0]}.`}\r\n                    <hr/>\r\n                    {state.account.name}\r\n                    <hr/>\r\n                    {state.terminal.name}\r\n                    <hr/>\r\n                    {state.status}\r\n                    <hr/>\r\n                    <button onClick={props.onEditButtonCallback}>Редактировать</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport styles from \"../Entry.module.css\";\r\nimport {entryPageStateType} from \"../../../redux/entryReducer\";\r\nimport {entryType} from \"../../../redux/entriesReducer\";\r\n\r\ntype EntryEditPropsType = {\r\n    state: entryPageStateType,\r\n    onSaveButtonCallback: (entry: entryType) => void,\r\n}\r\nexport const EntryEdit: React.FC<EntryEditPropsType> = React.memo((props) => {\r\n    const state = props.state\r\n    \r\n    //status\r\n    const [status, setStatus] = useState(state.status)\r\n\r\n    //callback\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement>, func: (str: string) => void) => {\r\n        const value = e.currentTarget.value\r\n        if (value) {\r\n            func(value)\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={styles.entry}>\r\n                <div className={styles.entry}>\r\n                    №{state.id}\r\n                    <hr/>\r\n                    {`${new Date(state.created_date).getDate()}.${new Date(state.created_date).getMonth()}.${new Date(state.created_date).getFullYear()} ${new Date(state.created_date).getHours()}:${new Date(state.created_date).getMinutes()}`}\r\n                    <hr/>\r\n                    {state.order_type.name}\r\n                    <hr/>\r\n                    {`${state.created_user.surname} ${state.created_user.name[0]}.${state.created_user.patronymic[0]}.`}\r\n                    <hr/>\r\n                    {state.account.name}\r\n                    <hr/>\r\n                    {state.terminal.name}\r\n                    <hr/>\r\n                    <select value={status} autoFocus\r\n                            onChange={(e) => onChangeCallback(e, setStatus)}>\r\n                        <option value={'new'}>new</option>\r\n                        <option value={'completed'}>completed</option>\r\n                        <option value={'assigned_to'}>assigned_to</option>\r\n                        <option value={'declined'}>declined</option>\r\n                        <option value={'started'}>started</option>\r\n                    </select>\r\n                    <hr/>\r\n                    <button onClick={() => props.onSaveButtonCallback(\r\n                        {\r\n                            ...props.state,\r\n                            status: status,\r\n                        }\r\n                    )}>Сохранить\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})","export default __webpack_public_path__ + \"static/media/preloader.53b421a8.gif\";","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {entryPageStateType, setEntry} from \"../../redux/entryReducer\";\r\nimport {stateType} from \"../../redux/rootStore\";\r\nimport {fileApi} from \"../../api/fileApi\";\r\nimport {EntryInfo} from \"./EntryInfo/EntryInfo\";\r\nimport {EntryEdit} from \"./EntryEdit/EntryEdit\";\r\nimport preLoader from '../../common/preloader.gif'\r\nimport {entriesPageType, entryType, getEntries} from \"../../redux/entriesReducer\";\r\n\r\ntype PathParamsType = {\r\n    entryId: string,\r\n}\r\n\r\nconst EntrySecret: React.FC<RouteComponentProps<PathParamsType>> = React.memo((props) => {\r\n    console.log('from Entry')\r\n    //initial data\r\n    const state = useSelector<stateType, entryPageStateType>(state => state.entryPage)\r\n    const entriesState = useSelector<stateType, entriesPageType>(state => state.entriesPage)\r\n    const dispatch = useDispatch()\r\n\r\n    //is edit mode?\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    //callbacks\r\n    const onEditButtonCallback = useCallback(() => {\r\n        setEditMode(true)\r\n    }, [])\r\n    const onSaveButtonCallback = useCallback((entry: entryType) => {\r\n        fileApi.renewData(entry)\r\n        setEditMode(false)\r\n        dispatch(setEntry(fileApi.setEntry(state.id)))\r\n        const {entries, totalCount} = fileApi.getEntries(\r\n            entriesState.pageSize,\r\n            entriesState.currentPage,\r\n            entriesState.filter,\r\n            entriesState.sortDate)\r\n        dispatch(getEntries(entries, totalCount, 1))\r\n    }, [state.id, dispatch])\r\n\r\n    //side-effects\r\n    useEffect(() => {\r\n        document.title = props.match.params.entryId\r\n        dispatch(setEntry(fileApi.setEntry(+props.match.params.entryId)))\r\n    }, [dispatch, props.match.params.entryId])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                state.id !== +props.match.params.entryId ?\r\n                    <img src={preLoader} alt={'please, wait...'}/> :\r\n                    editMode ?\r\n                        <EntryEdit state={state} onSaveButtonCallback={onSaveButtonCallback}/> :\r\n                        <EntryInfo state={state} onEditButtonCallback={onEditButtonCallback}/>\r\n            }\r\n        </React.Fragment>\r\n    )\r\n})\r\n\r\nexport const Entry = withRouter(EntrySecret)","import React, {useEffect} from 'react';\nimport './App.module.css';\nimport {TableContainer} from './components/Table/Table';\nimport styles from './App.module.css'\nimport {HashRouter, NavLink, Route} from \"react-router-dom\";\nimport {Switch} from 'react-router-dom';\nimport {Entry} from \"./components/Entry/Entry\";\n\nconst App: React.FC = React.memo(() => {\n    useEffect(() => {\n        document.title = 'Тестовое задание'\n    }, [])\n\n    return (\n        <HashRouter>\n            <div className={styles.app}>\n                <h1><NavLink to={'/'}>Тестовое задание</NavLink></h1>\n                <Switch>\n                    <Route path={'/'} exact render={() => <TableContainer/>}/>\n                    <Route path={'/order/:entryId'} render={() => <Entry/>}/>\n                </Switch>\n            </div>\n        </HashRouter>\n    )\n})\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {\r\n    changeCurrentPageActionType, changeFilterActionType,\r\n    changePageSizeActionType, changeSortDateValueActionType,\r\n    entriesReducer,\r\n    getEntriesActionType,\r\n    testActionType\r\n} from \"./entriesReducer\";\r\nimport {entryReducer, setEntryActionType} from \"./entryReducer\";\r\n\r\n//types\r\nexport type actionsType =\r\n    testActionType\r\n    | getEntriesActionType\r\n    | changeCurrentPageActionType\r\n    | changePageSizeActionType\r\n    | setEntryActionType\r\n    | changeFilterActionType\r\n    | changeSortDateValueActionType\r\n\r\nexport type stateType = ReturnType<typeof store.getState>\r\nexport type dispatchType = typeof store.dispatch\r\n\r\nconst reducers = combineReducers({\r\n        entriesPage: entriesReducer,\r\n        entryPage: entryReducer,\r\n    }\r\n)\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunk))\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/rootStore\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Table_wrapper__1ItqM\",\"hat\":\"Table_hat__-MJ_c\",\"row\":\"Table_row__1W1qc\",\"optionsWrapper\":\"Table_optionsWrapper__34Aq8\",\"even\":\"Table_even__VsG8M\",\"bottom\":\"Table_bottom__2EBDT\"};"],"sourceRoot":""}